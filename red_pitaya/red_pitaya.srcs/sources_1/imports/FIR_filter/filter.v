// -------------------------------------------------------------
// 
// File Name: C:\Users\marcel.roth\Desktop\Support Matlab\FIR-code\hdlsrc\FIR_filter\filter.v
// Created: 2016-11-04 10:27:25
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: filter
// Source Path: FIR_filter/filter
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module filter
          (
           clk,
           reset,
           enb,
           filter_in,
           filter_out
          );



  input   clk;
  input   reset;
  input   enb;
  input   signed [13:0] filter_in;  // sfix14
  output  signed [13:0] filter_out;  // sfix14

  wire signed [13:0] coeff1;  // sfix14_En16
  reg signed [13:0] Delay_Pipeline_reg [0:107];  // sfix14 [108]
  wire signed [13:0] Delay_Pipeline_reg_next [0:107];  // sfix14 [108]
  wire signed [13:0] delay_pipeline_1 [0:107];  // sfix14 [108]
  wire signed [13:0] delay_pipeline_0;  // sfix14
  wire signed [13:0] delay_pipeline_1_1;  // sfix14
  wire signed [13:0] delay_pipeline_2;  // sfix14
  wire signed [13:0] delay_pipeline_3;  // sfix14
  wire signed [13:0] delay_pipeline_4;  // sfix14
  wire signed [13:0] delay_pipeline_5;  // sfix14
  wire signed [13:0] delay_pipeline_6;  // sfix14
  wire signed [13:0] delay_pipeline_7;  // sfix14
  wire signed [13:0] delay_pipeline_8;  // sfix14
  wire signed [13:0] delay_pipeline_9;  // sfix14
  wire signed [13:0] delay_pipeline_10;  // sfix14
  wire signed [13:0] delay_pipeline_11;  // sfix14
  wire signed [13:0] delay_pipeline_12;  // sfix14
  wire signed [13:0] delay_pipeline_13;  // sfix14
  wire signed [13:0] delay_pipeline_14;  // sfix14
  wire signed [13:0] delay_pipeline_15;  // sfix14
  wire signed [13:0] delay_pipeline_16;  // sfix14
  wire signed [13:0] delay_pipeline_17;  // sfix14
  wire signed [13:0] delay_pipeline_18;  // sfix14
  wire signed [13:0] delay_pipeline_19;  // sfix14
  wire signed [13:0] delay_pipeline_20;  // sfix14
  wire signed [13:0] delay_pipeline_21;  // sfix14
  wire signed [13:0] delay_pipeline_22;  // sfix14
  wire signed [13:0] delay_pipeline_23;  // sfix14
  wire signed [13:0] delay_pipeline_24;  // sfix14
  wire signed [13:0] delay_pipeline_25;  // sfix14
  wire signed [13:0] delay_pipeline_26;  // sfix14
  wire signed [13:0] delay_pipeline_27;  // sfix14
  wire signed [13:0] delay_pipeline_28;  // sfix14
  wire signed [13:0] delay_pipeline_29;  // sfix14
  wire signed [13:0] delay_pipeline_30;  // sfix14
  wire signed [13:0] delay_pipeline_31;  // sfix14
  wire signed [13:0] delay_pipeline_32;  // sfix14
  wire signed [13:0] delay_pipeline_33;  // sfix14
  wire signed [13:0] delay_pipeline_34;  // sfix14
  wire signed [13:0] delay_pipeline_35;  // sfix14
  wire signed [13:0] delay_pipeline_36;  // sfix14
  wire signed [13:0] delay_pipeline_37;  // sfix14
  wire signed [13:0] delay_pipeline_38;  // sfix14
  wire signed [13:0] delay_pipeline_39;  // sfix14
  wire signed [13:0] delay_pipeline_40;  // sfix14
  wire signed [13:0] delay_pipeline_41;  // sfix14
  wire signed [13:0] delay_pipeline_42;  // sfix14
  wire signed [13:0] delay_pipeline_43;  // sfix14
  wire signed [13:0] delay_pipeline_44;  // sfix14
  wire signed [13:0] delay_pipeline_45;  // sfix14
  wire signed [13:0] delay_pipeline_46;  // sfix14
  wire signed [13:0] delay_pipeline_47;  // sfix14
  wire signed [13:0] delay_pipeline_48;  // sfix14
  wire signed [13:0] delay_pipeline_49;  // sfix14
  wire signed [13:0] delay_pipeline_50;  // sfix14
  wire signed [13:0] delay_pipeline_51;  // sfix14
  wire signed [13:0] delay_pipeline_52;  // sfix14
  wire signed [13:0] delay_pipeline_53;  // sfix14
  wire signed [13:0] delay_pipeline_54;  // sfix14
  wire signed [13:0] delay_pipeline_55;  // sfix14
  wire signed [13:0] delay_pipeline_56;  // sfix14
  wire signed [13:0] delay_pipeline_57;  // sfix14
  wire signed [13:0] delay_pipeline_58;  // sfix14
  wire signed [13:0] delay_pipeline_59;  // sfix14
  wire signed [13:0] delay_pipeline_60;  // sfix14
  wire signed [13:0] delay_pipeline_61;  // sfix14
  wire signed [13:0] delay_pipeline_62;  // sfix14
  wire signed [13:0] delay_pipeline_63;  // sfix14
  wire signed [13:0] delay_pipeline_64;  // sfix14
  wire signed [13:0] delay_pipeline_65;  // sfix14
  wire signed [13:0] delay_pipeline_66;  // sfix14
  wire signed [13:0] delay_pipeline_67;  // sfix14
  wire signed [13:0] delay_pipeline_68;  // sfix14
  wire signed [13:0] delay_pipeline_69;  // sfix14
  wire signed [13:0] delay_pipeline_70;  // sfix14
  wire signed [13:0] delay_pipeline_71;  // sfix14
  wire signed [13:0] delay_pipeline_72;  // sfix14
  wire signed [13:0] delay_pipeline_73;  // sfix14
  wire signed [13:0] delay_pipeline_74;  // sfix14
  wire signed [13:0] delay_pipeline_75;  // sfix14
  wire signed [13:0] delay_pipeline_76;  // sfix14
  wire signed [13:0] delay_pipeline_77;  // sfix14
  wire signed [13:0] delay_pipeline_78;  // sfix14
  wire signed [13:0] delay_pipeline_79;  // sfix14
  wire signed [13:0] delay_pipeline_80;  // sfix14
  wire signed [13:0] delay_pipeline_81;  // sfix14
  wire signed [13:0] delay_pipeline_82;  // sfix14
  wire signed [13:0] delay_pipeline_83;  // sfix14
  wire signed [13:0] delay_pipeline_84;  // sfix14
  wire signed [13:0] delay_pipeline_85;  // sfix14
  wire signed [13:0] delay_pipeline_86;  // sfix14
  wire signed [13:0] delay_pipeline_87;  // sfix14
  wire signed [13:0] delay_pipeline_88;  // sfix14
  wire signed [13:0] delay_pipeline_89;  // sfix14
  wire signed [13:0] delay_pipeline_90;  // sfix14
  wire signed [13:0] delay_pipeline_91;  // sfix14
  wire signed [13:0] delay_pipeline_92;  // sfix14
  wire signed [13:0] delay_pipeline_93;  // sfix14
  wire signed [13:0] delay_pipeline_94;  // sfix14
  wire signed [13:0] delay_pipeline_95;  // sfix14
  wire signed [13:0] delay_pipeline_96;  // sfix14
  wire signed [13:0] delay_pipeline_97;  // sfix14
  wire signed [13:0] delay_pipeline_98;  // sfix14
  wire signed [13:0] delay_pipeline_99;  // sfix14
  wire signed [13:0] delay_pipeline_100;  // sfix14
  wire signed [13:0] delay_pipeline_101;  // sfix14
  wire signed [13:0] delay_pipeline_102;  // sfix14
  wire signed [13:0] delay_pipeline_103;  // sfix14
  wire signed [13:0] delay_pipeline_104;  // sfix14
  wire signed [13:0] delay_pipeline_105;  // sfix14
  wire signed [13:0] delay_pipeline_106;  // sfix14
  wire signed [13:0] delay_pipeline_107;  // sfix14
  wire signed [27:0] multiplier_mul_temp;  // sfix28_En16
  wire signed [28:0] product1;  // sfix29_En31
  wire signed [33:0] sum1_cast1;  // sfix34_En31
  wire signed [13:0] coeff2;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_1;  // sfix28_En16
  wire signed [28:0] product2;  // sfix29_En31
  wire signed [33:0] sum1_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast;  // sfix35_En31
  wire signed [34:0] adder_add_cast_1;  // sfix35_En31
  wire signed [34:0] sum1_temp;  // sfix35_En31
  wire signed [33:0] sum1;  // sfix34_En31
  wire signed [13:0] coeff3;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_2;  // sfix28_En16
  wire signed [28:0] product3;  // sfix29_En31
  wire signed [33:0] sum2_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_2;  // sfix35_En31
  wire signed [34:0] adder_add_cast_3;  // sfix35_En31
  wire signed [34:0] sum2_temp;  // sfix35_En31
  wire signed [33:0] sum2;  // sfix34_En31
  wire signed [13:0] coeff4;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_3;  // sfix28_En16
  wire signed [28:0] product4;  // sfix29_En31
  wire signed [33:0] sum3_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_4;  // sfix35_En31
  wire signed [34:0] adder_add_cast_5;  // sfix35_En31
  wire signed [34:0] sum3_temp;  // sfix35_En31
  wire signed [33:0] sum3;  // sfix34_En31
  wire signed [13:0] coeff5;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_4;  // sfix28_En16
  wire signed [28:0] product5;  // sfix29_En31
  wire signed [33:0] sum4_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_6;  // sfix35_En31
  wire signed [34:0] adder_add_cast_7;  // sfix35_En31
  wire signed [34:0] sum4_temp;  // sfix35_En31
  wire signed [33:0] sum4;  // sfix34_En31
  wire signed [13:0] coeff6;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_5;  // sfix28_En16
  wire signed [28:0] product6;  // sfix29_En31
  wire signed [33:0] sum5_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_8;  // sfix35_En31
  wire signed [34:0] adder_add_cast_9;  // sfix35_En31
  wire signed [34:0] sum5_temp;  // sfix35_En31
  wire signed [33:0] sum5;  // sfix34_En31
  wire signed [13:0] coeff7;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_6;  // sfix28_En16
  wire signed [28:0] product7;  // sfix29_En31
  wire signed [33:0] sum6_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_10;  // sfix35_En31
  wire signed [34:0] adder_add_cast_11;  // sfix35_En31
  wire signed [34:0] sum6_temp;  // sfix35_En31
  wire signed [33:0] sum6;  // sfix34_En31
  wire signed [13:0] coeff8;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_7;  // sfix28_En16
  wire signed [28:0] product8;  // sfix29_En31
  wire signed [33:0] sum7_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_12;  // sfix35_En31
  wire signed [34:0] adder_add_cast_13;  // sfix35_En31
  wire signed [34:0] sum7_temp;  // sfix35_En31
  wire signed [33:0] sum7;  // sfix34_En31
  wire signed [13:0] coeff9;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_8;  // sfix28_En16
  wire signed [28:0] product9;  // sfix29_En31
  wire signed [33:0] sum8_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_14;  // sfix35_En31
  wire signed [34:0] adder_add_cast_15;  // sfix35_En31
  wire signed [34:0] sum8_temp;  // sfix35_En31
  wire signed [33:0] sum8;  // sfix34_En31
  wire signed [13:0] coeff10;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_9;  // sfix28_En16
  wire signed [28:0] product10;  // sfix29_En31
  wire signed [33:0] sum9_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_16;  // sfix35_En31
  wire signed [34:0] adder_add_cast_17;  // sfix35_En31
  wire signed [34:0] sum9_temp;  // sfix35_En31
  wire signed [33:0] sum9;  // sfix34_En31
  wire signed [13:0] coeff11;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_10;  // sfix28_En16
  wire signed [28:0] product11;  // sfix29_En31
  wire signed [33:0] sum10_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_18;  // sfix35_En31
  wire signed [34:0] adder_add_cast_19;  // sfix35_En31
  wire signed [34:0] sum10_temp;  // sfix35_En31
  wire signed [33:0] sum10;  // sfix34_En31
  wire signed [13:0] coeff12;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_11;  // sfix28_En16
  wire signed [28:0] product12;  // sfix29_En31
  wire signed [33:0] sum11_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_20;  // sfix35_En31
  wire signed [34:0] adder_add_cast_21;  // sfix35_En31
  wire signed [34:0] sum11_temp;  // sfix35_En31
  wire signed [33:0] sum11;  // sfix34_En31
  wire signed [13:0] coeff13;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_12;  // sfix28_En16
  wire signed [28:0] product13;  // sfix29_En31
  wire signed [33:0] sum12_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_22;  // sfix35_En31
  wire signed [34:0] adder_add_cast_23;  // sfix35_En31
  wire signed [34:0] sum12_temp;  // sfix35_En31
  wire signed [33:0] sum12;  // sfix34_En31
  wire signed [13:0] coeff14;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_13;  // sfix28_En16
  wire signed [28:0] product14;  // sfix29_En31
  wire signed [33:0] sum13_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_24;  // sfix35_En31
  wire signed [34:0] adder_add_cast_25;  // sfix35_En31
  wire signed [34:0] sum13_temp;  // sfix35_En31
  wire signed [33:0] sum13;  // sfix34_En31
  wire signed [13:0] coeff15;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_14;  // sfix28_En16
  wire signed [28:0] product15;  // sfix29_En31
  wire signed [33:0] sum14_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_26;  // sfix35_En31
  wire signed [34:0] adder_add_cast_27;  // sfix35_En31
  wire signed [34:0] sum14_temp;  // sfix35_En31
  wire signed [33:0] sum14;  // sfix34_En31
  wire signed [13:0] coeff16;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_15;  // sfix28_En16
  wire signed [28:0] product16;  // sfix29_En31
  wire signed [33:0] sum15_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_28;  // sfix35_En31
  wire signed [34:0] adder_add_cast_29;  // sfix35_En31
  wire signed [34:0] sum15_temp;  // sfix35_En31
  wire signed [33:0] sum15;  // sfix34_En31
  wire signed [13:0] coeff17;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_16;  // sfix28_En16
  wire signed [28:0] product17;  // sfix29_En31
  wire signed [33:0] sum16_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_30;  // sfix35_En31
  wire signed [34:0] adder_add_cast_31;  // sfix35_En31
  wire signed [34:0] sum16_temp;  // sfix35_En31
  wire signed [33:0] sum16;  // sfix34_En31
  wire signed [13:0] coeff18;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_17;  // sfix28_En16
  wire signed [28:0] product18;  // sfix29_En31
  wire signed [33:0] sum17_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_32;  // sfix35_En31
  wire signed [34:0] adder_add_cast_33;  // sfix35_En31
  wire signed [34:0] sum17_temp;  // sfix35_En31
  wire signed [33:0] sum17;  // sfix34_En31
  wire signed [13:0] coeff19;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_18;  // sfix28_En16
  wire signed [28:0] product19;  // sfix29_En31
  wire signed [33:0] sum18_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_34;  // sfix35_En31
  wire signed [34:0] adder_add_cast_35;  // sfix35_En31
  wire signed [34:0] sum18_temp;  // sfix35_En31
  wire signed [33:0] sum18;  // sfix34_En31
  wire signed [13:0] coeff20;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_19;  // sfix28_En16
  wire signed [28:0] product20;  // sfix29_En31
  wire signed [33:0] sum19_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_36;  // sfix35_En31
  wire signed [34:0] adder_add_cast_37;  // sfix35_En31
  wire signed [34:0] sum19_temp;  // sfix35_En31
  wire signed [33:0] sum19;  // sfix34_En31
  wire signed [13:0] coeff21;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_20;  // sfix28_En16
  wire signed [28:0] product21;  // sfix29_En31
  wire signed [33:0] sum20_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_38;  // sfix35_En31
  wire signed [34:0] adder_add_cast_39;  // sfix35_En31
  wire signed [34:0] sum20_temp;  // sfix35_En31
  wire signed [33:0] sum20;  // sfix34_En31
  wire signed [13:0] coeff22;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_21;  // sfix28_En16
  wire signed [28:0] product22;  // sfix29_En31
  wire signed [33:0] sum21_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_40;  // sfix35_En31
  wire signed [34:0] adder_add_cast_41;  // sfix35_En31
  wire signed [34:0] sum21_temp;  // sfix35_En31
  wire signed [33:0] sum21;  // sfix34_En31
  wire signed [13:0] coeff23;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_22;  // sfix28_En16
  wire signed [28:0] product23;  // sfix29_En31
  wire signed [33:0] sum22_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_42;  // sfix35_En31
  wire signed [34:0] adder_add_cast_43;  // sfix35_En31
  wire signed [34:0] sum22_temp;  // sfix35_En31
  wire signed [33:0] sum22;  // sfix34_En31
  wire signed [13:0] coeff24;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_23;  // sfix28_En16
  wire signed [28:0] product24;  // sfix29_En31
  wire signed [33:0] sum23_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_44;  // sfix35_En31
  wire signed [34:0] adder_add_cast_45;  // sfix35_En31
  wire signed [34:0] sum23_temp;  // sfix35_En31
  wire signed [33:0] sum23;  // sfix34_En31
  wire signed [13:0] coeff25;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_24;  // sfix28_En16
  wire signed [28:0] product25;  // sfix29_En31
  wire signed [33:0] sum24_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_46;  // sfix35_En31
  wire signed [34:0] adder_add_cast_47;  // sfix35_En31
  wire signed [34:0] sum24_temp;  // sfix35_En31
  wire signed [33:0] sum24;  // sfix34_En31
  wire signed [13:0] coeff26;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_25;  // sfix28_En16
  wire signed [28:0] product26;  // sfix29_En31
  wire signed [33:0] sum25_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_48;  // sfix35_En31
  wire signed [34:0] adder_add_cast_49;  // sfix35_En31
  wire signed [34:0] sum25_temp;  // sfix35_En31
  wire signed [33:0] sum25;  // sfix34_En31
  wire signed [13:0] coeff27;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_26;  // sfix28_En16
  wire signed [28:0] product27;  // sfix29_En31
  wire signed [33:0] sum26_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_50;  // sfix35_En31
  wire signed [34:0] adder_add_cast_51;  // sfix35_En31
  wire signed [34:0] sum26_temp;  // sfix35_En31
  wire signed [33:0] sum26;  // sfix34_En31
  wire signed [13:0] coeff28;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_27;  // sfix28_En16
  wire signed [28:0] product28;  // sfix29_En31
  wire signed [33:0] sum27_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_52;  // sfix35_En31
  wire signed [34:0] adder_add_cast_53;  // sfix35_En31
  wire signed [34:0] sum27_temp;  // sfix35_En31
  wire signed [33:0] sum27;  // sfix34_En31
  wire signed [13:0] coeff29;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_28;  // sfix28_En16
  wire signed [28:0] product29;  // sfix29_En31
  wire signed [33:0] sum28_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_54;  // sfix35_En31
  wire signed [34:0] adder_add_cast_55;  // sfix35_En31
  wire signed [34:0] sum28_temp;  // sfix35_En31
  wire signed [33:0] sum28;  // sfix34_En31
  wire signed [13:0] coeff30;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_29;  // sfix28_En16
  wire signed [28:0] product30;  // sfix29_En31
  wire signed [33:0] sum29_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_56;  // sfix35_En31
  wire signed [34:0] adder_add_cast_57;  // sfix35_En31
  wire signed [34:0] sum29_temp;  // sfix35_En31
  wire signed [33:0] sum29;  // sfix34_En31
  wire signed [13:0] coeff31;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_30;  // sfix28_En16
  wire signed [28:0] product31;  // sfix29_En31
  wire signed [33:0] sum30_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_58;  // sfix35_En31
  wire signed [34:0] adder_add_cast_59;  // sfix35_En31
  wire signed [34:0] sum30_temp;  // sfix35_En31
  wire signed [33:0] sum30;  // sfix34_En31
  wire signed [13:0] coeff32;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_31;  // sfix28_En16
  wire signed [28:0] product32;  // sfix29_En31
  wire signed [33:0] sum31_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_60;  // sfix35_En31
  wire signed [34:0] adder_add_cast_61;  // sfix35_En31
  wire signed [34:0] sum31_temp;  // sfix35_En31
  wire signed [33:0] sum31;  // sfix34_En31
  wire signed [13:0] coeff33;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_32;  // sfix28_En16
  wire signed [28:0] product33;  // sfix29_En31
  wire signed [33:0] sum32_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_62;  // sfix35_En31
  wire signed [34:0] adder_add_cast_63;  // sfix35_En31
  wire signed [34:0] sum32_temp;  // sfix35_En31
  wire signed [33:0] sum32;  // sfix34_En31
  wire signed [13:0] coeff34;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_33;  // sfix28_En16
  wire signed [28:0] product34;  // sfix29_En31
  wire signed [33:0] sum33_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_64;  // sfix35_En31
  wire signed [34:0] adder_add_cast_65;  // sfix35_En31
  wire signed [34:0] sum33_temp;  // sfix35_En31
  wire signed [33:0] sum33;  // sfix34_En31
  wire signed [13:0] coeff35;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_34;  // sfix28_En16
  wire signed [28:0] product35;  // sfix29_En31
  wire signed [33:0] sum34_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_66;  // sfix35_En31
  wire signed [34:0] adder_add_cast_67;  // sfix35_En31
  wire signed [34:0] sum34_temp;  // sfix35_En31
  wire signed [33:0] sum34;  // sfix34_En31
  wire signed [13:0] coeff36;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_35;  // sfix28_En16
  wire signed [28:0] product36;  // sfix29_En31
  wire signed [33:0] sum35_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_68;  // sfix35_En31
  wire signed [34:0] adder_add_cast_69;  // sfix35_En31
  wire signed [34:0] sum35_temp;  // sfix35_En31
  wire signed [33:0] sum35;  // sfix34_En31
  wire signed [13:0] coeff37;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_36;  // sfix28_En16
  wire signed [28:0] product37;  // sfix29_En31
  wire signed [33:0] sum36_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_70;  // sfix35_En31
  wire signed [34:0] adder_add_cast_71;  // sfix35_En31
  wire signed [34:0] sum36_temp;  // sfix35_En31
  wire signed [33:0] sum36;  // sfix34_En31
  wire signed [13:0] coeff38;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_37;  // sfix28_En16
  wire signed [28:0] product38;  // sfix29_En31
  wire signed [33:0] sum37_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_72;  // sfix35_En31
  wire signed [34:0] adder_add_cast_73;  // sfix35_En31
  wire signed [34:0] sum37_temp;  // sfix35_En31
  wire signed [33:0] sum37;  // sfix34_En31
  wire signed [13:0] coeff39;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_38;  // sfix28_En16
  wire signed [28:0] product39;  // sfix29_En31
  wire signed [33:0] sum38_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_74;  // sfix35_En31
  wire signed [34:0] adder_add_cast_75;  // sfix35_En31
  wire signed [34:0] sum38_temp;  // sfix35_En31
  wire signed [33:0] sum38;  // sfix34_En31
  wire signed [13:0] coeff40;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_39;  // sfix28_En16
  wire signed [28:0] product40;  // sfix29_En31
  wire signed [33:0] sum39_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_76;  // sfix35_En31
  wire signed [34:0] adder_add_cast_77;  // sfix35_En31
  wire signed [34:0] sum39_temp;  // sfix35_En31
  wire signed [33:0] sum39;  // sfix34_En31
  wire signed [13:0] coeff41;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_40;  // sfix28_En16
  wire signed [28:0] product41;  // sfix29_En31
  wire signed [33:0] sum40_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_78;  // sfix35_En31
  wire signed [34:0] adder_add_cast_79;  // sfix35_En31
  wire signed [34:0] sum40_temp;  // sfix35_En31
  wire signed [33:0] sum40;  // sfix34_En31
  wire signed [13:0] coeff42;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_41;  // sfix28_En16
  wire signed [28:0] product42;  // sfix29_En31
  wire signed [33:0] sum41_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_80;  // sfix35_En31
  wire signed [34:0] adder_add_cast_81;  // sfix35_En31
  wire signed [34:0] sum41_temp;  // sfix35_En31
  wire signed [33:0] sum41;  // sfix34_En31
  wire signed [13:0] coeff43;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_42;  // sfix28_En16
  wire signed [28:0] product43;  // sfix29_En31
  wire signed [33:0] sum42_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_82;  // sfix35_En31
  wire signed [34:0] adder_add_cast_83;  // sfix35_En31
  wire signed [34:0] sum42_temp;  // sfix35_En31
  wire signed [33:0] sum42;  // sfix34_En31
  wire signed [13:0] coeff44;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_43;  // sfix28_En16
  wire signed [28:0] product44;  // sfix29_En31
  wire signed [33:0] sum43_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_84;  // sfix35_En31
  wire signed [34:0] adder_add_cast_85;  // sfix35_En31
  wire signed [34:0] sum43_temp;  // sfix35_En31
  wire signed [33:0] sum43;  // sfix34_En31
  wire signed [13:0] coeff45;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_44;  // sfix28_En16
  wire signed [28:0] product45;  // sfix29_En31
  wire signed [33:0] sum44_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_86;  // sfix35_En31
  wire signed [34:0] adder_add_cast_87;  // sfix35_En31
  wire signed [34:0] sum44_temp;  // sfix35_En31
  wire signed [33:0] sum44;  // sfix34_En31
  wire signed [13:0] coeff46;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_45;  // sfix28_En16
  wire signed [28:0] product46;  // sfix29_En31
  wire signed [33:0] sum45_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_88;  // sfix35_En31
  wire signed [34:0] adder_add_cast_89;  // sfix35_En31
  wire signed [34:0] sum45_temp;  // sfix35_En31
  wire signed [33:0] sum45;  // sfix34_En31
  wire signed [13:0] coeff47;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_46;  // sfix28_En16
  wire signed [28:0] product47;  // sfix29_En31
  wire signed [33:0] sum46_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_90;  // sfix35_En31
  wire signed [34:0] adder_add_cast_91;  // sfix35_En31
  wire signed [34:0] sum46_temp;  // sfix35_En31
  wire signed [33:0] sum46;  // sfix34_En31
  wire signed [13:0] coeff48;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_47;  // sfix28_En16
  wire signed [28:0] product48;  // sfix29_En31
  wire signed [33:0] sum47_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_92;  // sfix35_En31
  wire signed [34:0] adder_add_cast_93;  // sfix35_En31
  wire signed [34:0] sum47_temp;  // sfix35_En31
  wire signed [33:0] sum47;  // sfix34_En31
  wire signed [13:0] coeff49;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_48;  // sfix28_En16
  wire signed [28:0] product49;  // sfix29_En31
  wire signed [33:0] sum48_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_94;  // sfix35_En31
  wire signed [34:0] adder_add_cast_95;  // sfix35_En31
  wire signed [34:0] sum48_temp;  // sfix35_En31
  wire signed [33:0] sum48;  // sfix34_En31
  wire signed [13:0] coeff50;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_49;  // sfix28_En16
  wire signed [28:0] product50;  // sfix29_En31
  wire signed [33:0] sum49_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_96;  // sfix35_En31
  wire signed [34:0] adder_add_cast_97;  // sfix35_En31
  wire signed [34:0] sum49_temp;  // sfix35_En31
  wire signed [33:0] sum49;  // sfix34_En31
  wire signed [13:0] coeff51;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_50;  // sfix28_En16
  wire signed [28:0] product51;  // sfix29_En31
  wire signed [33:0] sum50_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_98;  // sfix35_En31
  wire signed [34:0] adder_add_cast_99;  // sfix35_En31
  wire signed [34:0] sum50_temp;  // sfix35_En31
  wire signed [33:0] sum50;  // sfix34_En31
  wire signed [13:0] coeff52;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_51;  // sfix28_En16
  wire signed [28:0] product52;  // sfix29_En31
  wire signed [33:0] sum51_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_100;  // sfix35_En31
  wire signed [34:0] adder_add_cast_101;  // sfix35_En31
  wire signed [34:0] sum51_temp;  // sfix35_En31
  wire signed [33:0] sum51;  // sfix34_En31
  wire signed [13:0] coeff53;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_52;  // sfix28_En16
  wire signed [28:0] product53;  // sfix29_En31
  wire signed [33:0] sum52_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_102;  // sfix35_En31
  wire signed [34:0] adder_add_cast_103;  // sfix35_En31
  wire signed [34:0] sum52_temp;  // sfix35_En31
  wire signed [33:0] sum52;  // sfix34_En31
  wire signed [13:0] coeff54;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_53;  // sfix28_En16
  wire signed [28:0] product54;  // sfix29_En31
  wire signed [33:0] sum53_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_104;  // sfix35_En31
  wire signed [34:0] adder_add_cast_105;  // sfix35_En31
  wire signed [34:0] sum53_temp;  // sfix35_En31
  wire signed [33:0] sum53;  // sfix34_En31
  wire signed [13:0] coeff55;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_54;  // sfix28_En16
  wire signed [28:0] product55;  // sfix29_En31
  wire signed [33:0] sum54_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_106;  // sfix35_En31
  wire signed [34:0] adder_add_cast_107;  // sfix35_En31
  wire signed [34:0] sum54_temp;  // sfix35_En31
  wire signed [33:0] sum54;  // sfix34_En31
  wire signed [13:0] coeff56;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_55;  // sfix28_En16
  wire signed [28:0] product56;  // sfix29_En31
  wire signed [33:0] sum55_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_108;  // sfix35_En31
  wire signed [34:0] adder_add_cast_109;  // sfix35_En31
  wire signed [34:0] sum55_temp;  // sfix35_En31
  wire signed [33:0] sum55;  // sfix34_En31
  wire signed [13:0] coeff57;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_56;  // sfix28_En16
  wire signed [28:0] product57;  // sfix29_En31
  wire signed [33:0] sum56_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_110;  // sfix35_En31
  wire signed [34:0] adder_add_cast_111;  // sfix35_En31
  wire signed [34:0] sum56_temp;  // sfix35_En31
  wire signed [33:0] sum56;  // sfix34_En31
  wire signed [13:0] coeff58;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_57;  // sfix28_En16
  wire signed [28:0] product58;  // sfix29_En31
  wire signed [33:0] sum57_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_112;  // sfix35_En31
  wire signed [34:0] adder_add_cast_113;  // sfix35_En31
  wire signed [34:0] sum57_temp;  // sfix35_En31
  wire signed [33:0] sum57;  // sfix34_En31
  wire signed [13:0] coeff59;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_58;  // sfix28_En16
  wire signed [28:0] product59;  // sfix29_En31
  wire signed [33:0] sum58_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_114;  // sfix35_En31
  wire signed [34:0] adder_add_cast_115;  // sfix35_En31
  wire signed [34:0] sum58_temp;  // sfix35_En31
  wire signed [33:0] sum58;  // sfix34_En31
  wire signed [13:0] coeff60;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_59;  // sfix28_En16
  wire signed [28:0] product60;  // sfix29_En31
  wire signed [33:0] sum59_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_116;  // sfix35_En31
  wire signed [34:0] adder_add_cast_117;  // sfix35_En31
  wire signed [34:0] sum59_temp;  // sfix35_En31
  wire signed [33:0] sum59;  // sfix34_En31
  wire signed [13:0] coeff61;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_60;  // sfix28_En16
  wire signed [28:0] product61;  // sfix29_En31
  wire signed [33:0] sum60_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_118;  // sfix35_En31
  wire signed [34:0] adder_add_cast_119;  // sfix35_En31
  wire signed [34:0] sum60_temp;  // sfix35_En31
  wire signed [33:0] sum60;  // sfix34_En31
  wire signed [13:0] coeff62;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_61;  // sfix28_En16
  wire signed [28:0] product62;  // sfix29_En31
  wire signed [33:0] sum61_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_120;  // sfix35_En31
  wire signed [34:0] adder_add_cast_121;  // sfix35_En31
  wire signed [34:0] sum61_temp;  // sfix35_En31
  wire signed [33:0] sum61;  // sfix34_En31
  wire signed [13:0] coeff63;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_62;  // sfix28_En16
  wire signed [28:0] product63;  // sfix29_En31
  wire signed [33:0] sum62_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_122;  // sfix35_En31
  wire signed [34:0] adder_add_cast_123;  // sfix35_En31
  wire signed [34:0] sum62_temp;  // sfix35_En31
  wire signed [33:0] sum62;  // sfix34_En31
  wire signed [13:0] coeff64;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_63;  // sfix28_En16
  wire signed [28:0] product64;  // sfix29_En31
  wire signed [33:0] sum63_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_124;  // sfix35_En31
  wire signed [34:0] adder_add_cast_125;  // sfix35_En31
  wire signed [34:0] sum63_temp;  // sfix35_En31
  wire signed [33:0] sum63;  // sfix34_En31
  wire signed [13:0] coeff65;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_64;  // sfix28_En16
  wire signed [28:0] product65;  // sfix29_En31
  wire signed [33:0] sum64_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_126;  // sfix35_En31
  wire signed [34:0] adder_add_cast_127;  // sfix35_En31
  wire signed [34:0] sum64_temp;  // sfix35_En31
  wire signed [33:0] sum64;  // sfix34_En31
  wire signed [13:0] coeff66;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_65;  // sfix28_En16
  wire signed [28:0] product66;  // sfix29_En31
  wire signed [33:0] sum65_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_128;  // sfix35_En31
  wire signed [34:0] adder_add_cast_129;  // sfix35_En31
  wire signed [34:0] sum65_temp;  // sfix35_En31
  wire signed [33:0] sum65;  // sfix34_En31
  wire signed [13:0] coeff67;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_66;  // sfix28_En16
  wire signed [28:0] product67;  // sfix29_En31
  wire signed [33:0] sum66_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_130;  // sfix35_En31
  wire signed [34:0] adder_add_cast_131;  // sfix35_En31
  wire signed [34:0] sum66_temp;  // sfix35_En31
  wire signed [33:0] sum66;  // sfix34_En31
  wire signed [13:0] coeff68;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_67;  // sfix28_En16
  wire signed [28:0] product68;  // sfix29_En31
  wire signed [33:0] sum67_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_132;  // sfix35_En31
  wire signed [34:0] adder_add_cast_133;  // sfix35_En31
  wire signed [34:0] sum67_temp;  // sfix35_En31
  wire signed [33:0] sum67;  // sfix34_En31
  wire signed [13:0] coeff69;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_68;  // sfix28_En16
  wire signed [28:0] product69;  // sfix29_En31
  wire signed [33:0] sum68_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_134;  // sfix35_En31
  wire signed [34:0] adder_add_cast_135;  // sfix35_En31
  wire signed [34:0] sum68_temp;  // sfix35_En31
  wire signed [33:0] sum68;  // sfix34_En31
  wire signed [13:0] coeff70;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_69;  // sfix28_En16
  wire signed [28:0] product70;  // sfix29_En31
  wire signed [33:0] sum69_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_136;  // sfix35_En31
  wire signed [34:0] adder_add_cast_137;  // sfix35_En31
  wire signed [34:0] sum69_temp;  // sfix35_En31
  wire signed [33:0] sum69;  // sfix34_En31
  wire signed [13:0] coeff71;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_70;  // sfix28_En16
  wire signed [28:0] product71;  // sfix29_En31
  wire signed [33:0] sum70_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_138;  // sfix35_En31
  wire signed [34:0] adder_add_cast_139;  // sfix35_En31
  wire signed [34:0] sum70_temp;  // sfix35_En31
  wire signed [33:0] sum70;  // sfix34_En31
  wire signed [13:0] coeff72;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_71;  // sfix28_En16
  wire signed [28:0] product72;  // sfix29_En31
  wire signed [33:0] sum71_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_140;  // sfix35_En31
  wire signed [34:0] adder_add_cast_141;  // sfix35_En31
  wire signed [34:0] sum71_temp;  // sfix35_En31
  wire signed [33:0] sum71;  // sfix34_En31
  wire signed [13:0] coeff73;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_72;  // sfix28_En16
  wire signed [28:0] product73;  // sfix29_En31
  wire signed [33:0] sum72_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_142;  // sfix35_En31
  wire signed [34:0] adder_add_cast_143;  // sfix35_En31
  wire signed [34:0] sum72_temp;  // sfix35_En31
  wire signed [33:0] sum72;  // sfix34_En31
  wire signed [13:0] coeff74;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_73;  // sfix28_En16
  wire signed [28:0] product74;  // sfix29_En31
  wire signed [33:0] sum73_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_144;  // sfix35_En31
  wire signed [34:0] adder_add_cast_145;  // sfix35_En31
  wire signed [34:0] sum73_temp;  // sfix35_En31
  wire signed [33:0] sum73;  // sfix34_En31
  wire signed [13:0] coeff75;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_74;  // sfix28_En16
  wire signed [28:0] product75;  // sfix29_En31
  wire signed [33:0] sum74_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_146;  // sfix35_En31
  wire signed [34:0] adder_add_cast_147;  // sfix35_En31
  wire signed [34:0] sum74_temp;  // sfix35_En31
  wire signed [33:0] sum74;  // sfix34_En31
  wire signed [13:0] coeff76;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_75;  // sfix28_En16
  wire signed [28:0] product76;  // sfix29_En31
  wire signed [33:0] sum75_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_148;  // sfix35_En31
  wire signed [34:0] adder_add_cast_149;  // sfix35_En31
  wire signed [34:0] sum75_temp;  // sfix35_En31
  wire signed [33:0] sum75;  // sfix34_En31
  wire signed [13:0] coeff77;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_76;  // sfix28_En16
  wire signed [28:0] product77;  // sfix29_En31
  wire signed [33:0] sum76_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_150;  // sfix35_En31
  wire signed [34:0] adder_add_cast_151;  // sfix35_En31
  wire signed [34:0] sum76_temp;  // sfix35_En31
  wire signed [33:0] sum76;  // sfix34_En31
  wire signed [13:0] coeff78;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_77;  // sfix28_En16
  wire signed [28:0] product78;  // sfix29_En31
  wire signed [33:0] sum77_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_152;  // sfix35_En31
  wire signed [34:0] adder_add_cast_153;  // sfix35_En31
  wire signed [34:0] sum77_temp;  // sfix35_En31
  wire signed [33:0] sum77;  // sfix34_En31
  wire signed [13:0] coeff79;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_78;  // sfix28_En16
  wire signed [28:0] product79;  // sfix29_En31
  wire signed [33:0] sum78_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_154;  // sfix35_En31
  wire signed [34:0] adder_add_cast_155;  // sfix35_En31
  wire signed [34:0] sum78_temp;  // sfix35_En31
  wire signed [33:0] sum78;  // sfix34_En31
  wire signed [13:0] coeff80;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_79;  // sfix28_En16
  wire signed [28:0] product80;  // sfix29_En31
  wire signed [33:0] sum79_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_156;  // sfix35_En31
  wire signed [34:0] adder_add_cast_157;  // sfix35_En31
  wire signed [34:0] sum79_temp;  // sfix35_En31
  wire signed [33:0] sum79;  // sfix34_En31
  wire signed [13:0] coeff81;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_80;  // sfix28_En16
  wire signed [28:0] product81;  // sfix29_En31
  wire signed [33:0] sum80_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_158;  // sfix35_En31
  wire signed [34:0] adder_add_cast_159;  // sfix35_En31
  wire signed [34:0] sum80_temp;  // sfix35_En31
  wire signed [33:0] sum80;  // sfix34_En31
  wire signed [13:0] coeff82;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_81;  // sfix28_En16
  wire signed [28:0] product82;  // sfix29_En31
  wire signed [33:0] sum81_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_160;  // sfix35_En31
  wire signed [34:0] adder_add_cast_161;  // sfix35_En31
  wire signed [34:0] sum81_temp;  // sfix35_En31
  wire signed [33:0] sum81;  // sfix34_En31
  wire signed [13:0] coeff83;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_82;  // sfix28_En16
  wire signed [28:0] product83;  // sfix29_En31
  wire signed [33:0] sum82_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_162;  // sfix35_En31
  wire signed [34:0] adder_add_cast_163;  // sfix35_En31
  wire signed [34:0] sum82_temp;  // sfix35_En31
  wire signed [33:0] sum82;  // sfix34_En31
  wire signed [13:0] coeff84;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_83;  // sfix28_En16
  wire signed [28:0] product84;  // sfix29_En31
  wire signed [33:0] sum83_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_164;  // sfix35_En31
  wire signed [34:0] adder_add_cast_165;  // sfix35_En31
  wire signed [34:0] sum83_temp;  // sfix35_En31
  wire signed [33:0] sum83;  // sfix34_En31
  wire signed [13:0] coeff85;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_84;  // sfix28_En16
  wire signed [28:0] product85;  // sfix29_En31
  wire signed [33:0] sum84_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_166;  // sfix35_En31
  wire signed [34:0] adder_add_cast_167;  // sfix35_En31
  wire signed [34:0] sum84_temp;  // sfix35_En31
  wire signed [33:0] sum84;  // sfix34_En31
  wire signed [13:0] coeff86;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_85;  // sfix28_En16
  wire signed [28:0] product86;  // sfix29_En31
  wire signed [33:0] sum85_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_168;  // sfix35_En31
  wire signed [34:0] adder_add_cast_169;  // sfix35_En31
  wire signed [34:0] sum85_temp;  // sfix35_En31
  wire signed [33:0] sum85;  // sfix34_En31
  wire signed [13:0] coeff87;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_86;  // sfix28_En16
  wire signed [28:0] product87;  // sfix29_En31
  wire signed [33:0] sum86_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_170;  // sfix35_En31
  wire signed [34:0] adder_add_cast_171;  // sfix35_En31
  wire signed [34:0] sum86_temp;  // sfix35_En31
  wire signed [33:0] sum86;  // sfix34_En31
  wire signed [13:0] coeff88;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_87;  // sfix28_En16
  wire signed [28:0] product88;  // sfix29_En31
  wire signed [33:0] sum87_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_172;  // sfix35_En31
  wire signed [34:0] adder_add_cast_173;  // sfix35_En31
  wire signed [34:0] sum87_temp;  // sfix35_En31
  wire signed [33:0] sum87;  // sfix34_En31
  wire signed [13:0] coeff89;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_88;  // sfix28_En16
  wire signed [28:0] product89;  // sfix29_En31
  wire signed [33:0] sum88_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_174;  // sfix35_En31
  wire signed [34:0] adder_add_cast_175;  // sfix35_En31
  wire signed [34:0] sum88_temp;  // sfix35_En31
  wire signed [33:0] sum88;  // sfix34_En31
  wire signed [13:0] coeff90;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_89;  // sfix28_En16
  wire signed [28:0] product90;  // sfix29_En31
  wire signed [33:0] sum89_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_176;  // sfix35_En31
  wire signed [34:0] adder_add_cast_177;  // sfix35_En31
  wire signed [34:0] sum89_temp;  // sfix35_En31
  wire signed [33:0] sum89;  // sfix34_En31
  wire signed [13:0] coeff91;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_90;  // sfix28_En16
  wire signed [28:0] product91;  // sfix29_En31
  wire signed [33:0] sum90_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_178;  // sfix35_En31
  wire signed [34:0] adder_add_cast_179;  // sfix35_En31
  wire signed [34:0] sum90_temp;  // sfix35_En31
  wire signed [33:0] sum90;  // sfix34_En31
  wire signed [13:0] coeff92;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_91;  // sfix28_En16
  wire signed [28:0] product92;  // sfix29_En31
  wire signed [33:0] sum91_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_180;  // sfix35_En31
  wire signed [34:0] adder_add_cast_181;  // sfix35_En31
  wire signed [34:0] sum91_temp;  // sfix35_En31
  wire signed [33:0] sum91;  // sfix34_En31
  wire signed [13:0] coeff93;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_92;  // sfix28_En16
  wire signed [28:0] product93;  // sfix29_En31
  wire signed [33:0] sum92_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_182;  // sfix35_En31
  wire signed [34:0] adder_add_cast_183;  // sfix35_En31
  wire signed [34:0] sum92_temp;  // sfix35_En31
  wire signed [33:0] sum92;  // sfix34_En31
  wire signed [13:0] coeff94;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_93;  // sfix28_En16
  wire signed [28:0] product94;  // sfix29_En31
  wire signed [33:0] sum93_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_184;  // sfix35_En31
  wire signed [34:0] adder_add_cast_185;  // sfix35_En31
  wire signed [34:0] sum93_temp;  // sfix35_En31
  wire signed [33:0] sum93;  // sfix34_En31
  wire signed [13:0] coeff95;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_94;  // sfix28_En16
  wire signed [28:0] product95;  // sfix29_En31
  wire signed [33:0] sum94_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_186;  // sfix35_En31
  wire signed [34:0] adder_add_cast_187;  // sfix35_En31
  wire signed [34:0] sum94_temp;  // sfix35_En31
  wire signed [33:0] sum94;  // sfix34_En31
  wire signed [13:0] coeff96;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_95;  // sfix28_En16
  wire signed [28:0] product96;  // sfix29_En31
  wire signed [33:0] sum95_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_188;  // sfix35_En31
  wire signed [34:0] adder_add_cast_189;  // sfix35_En31
  wire signed [34:0] sum95_temp;  // sfix35_En31
  wire signed [33:0] sum95;  // sfix34_En31
  wire signed [13:0] coeff97;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_96;  // sfix28_En16
  wire signed [28:0] product97;  // sfix29_En31
  wire signed [33:0] sum96_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_190;  // sfix35_En31
  wire signed [34:0] adder_add_cast_191;  // sfix35_En31
  wire signed [34:0] sum96_temp;  // sfix35_En31
  wire signed [33:0] sum96;  // sfix34_En31
  wire signed [13:0] coeff98;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_97;  // sfix28_En16
  wire signed [28:0] product98;  // sfix29_En31
  wire signed [33:0] sum97_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_192;  // sfix35_En31
  wire signed [34:0] adder_add_cast_193;  // sfix35_En31
  wire signed [34:0] sum97_temp;  // sfix35_En31
  wire signed [33:0] sum97;  // sfix34_En31
  wire signed [13:0] coeff99;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_98;  // sfix28_En16
  wire signed [28:0] product99;  // sfix29_En31
  wire signed [33:0] sum98_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_194;  // sfix35_En31
  wire signed [34:0] adder_add_cast_195;  // sfix35_En31
  wire signed [34:0] sum98_temp;  // sfix35_En31
  wire signed [33:0] sum98;  // sfix34_En31
  wire signed [13:0] coeff100;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_99;  // sfix28_En16
  wire signed [28:0] product100;  // sfix29_En31
  wire signed [33:0] sum99_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_196;  // sfix35_En31
  wire signed [34:0] adder_add_cast_197;  // sfix35_En31
  wire signed [34:0] sum99_temp;  // sfix35_En31
  wire signed [33:0] sum99;  // sfix34_En31
  wire signed [13:0] coeff101;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_100;  // sfix28_En16
  wire signed [28:0] product101;  // sfix29_En31
  wire signed [33:0] sum100_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_198;  // sfix35_En31
  wire signed [34:0] adder_add_cast_199;  // sfix35_En31
  wire signed [34:0] sum100_temp;  // sfix35_En31
  wire signed [33:0] sum100;  // sfix34_En31
  wire signed [13:0] coeff102;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_101;  // sfix28_En16
  wire signed [28:0] product102;  // sfix29_En31
  wire signed [33:0] sum101_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_200;  // sfix35_En31
  wire signed [34:0] adder_add_cast_201;  // sfix35_En31
  wire signed [34:0] sum101_temp;  // sfix35_En31
  wire signed [33:0] sum101;  // sfix34_En31
  wire signed [13:0] coeff103;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_102;  // sfix28_En16
  wire signed [28:0] product103;  // sfix29_En31
  wire signed [33:0] sum102_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_202;  // sfix35_En31
  wire signed [34:0] adder_add_cast_203;  // sfix35_En31
  wire signed [34:0] sum102_temp;  // sfix35_En31
  wire signed [33:0] sum102;  // sfix34_En31
  wire signed [13:0] coeff104;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_103;  // sfix28_En16
  wire signed [28:0] product104;  // sfix29_En31
  wire signed [33:0] sum103_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_204;  // sfix35_En31
  wire signed [34:0] adder_add_cast_205;  // sfix35_En31
  wire signed [34:0] sum103_temp;  // sfix35_En31
  wire signed [33:0] sum103;  // sfix34_En31
  wire signed [13:0] coeff105;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_104;  // sfix28_En16
  wire signed [28:0] product105;  // sfix29_En31
  wire signed [33:0] sum104_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_206;  // sfix35_En31
  wire signed [34:0] adder_add_cast_207;  // sfix35_En31
  wire signed [34:0] sum104_temp;  // sfix35_En31
  wire signed [33:0] sum104;  // sfix34_En31
  wire signed [13:0] coeff106;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_105;  // sfix28_En16
  wire signed [28:0] product106;  // sfix29_En31
  wire signed [33:0] sum105_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_208;  // sfix35_En31
  wire signed [34:0] adder_add_cast_209;  // sfix35_En31
  wire signed [34:0] sum105_temp;  // sfix35_En31
  wire signed [33:0] sum105;  // sfix34_En31
  wire signed [13:0] coeff107;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_106;  // sfix28_En16
  wire signed [28:0] product107;  // sfix29_En31
  wire signed [33:0] sum106_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_210;  // sfix35_En31
  wire signed [34:0] adder_add_cast_211;  // sfix35_En31
  wire signed [34:0] sum106_temp;  // sfix35_En31
  wire signed [33:0] sum106;  // sfix34_En31
  wire signed [13:0] coeff108;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_107;  // sfix28_En16
  wire signed [28:0] product108;  // sfix29_En31
  wire signed [33:0] sum107_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_212;  // sfix35_En31
  wire signed [34:0] adder_add_cast_213;  // sfix35_En31
  wire signed [34:0] sum107_temp;  // sfix35_En31
  wire signed [33:0] sum107;  // sfix34_En31
  wire signed [13:0] coeff109;  // sfix14_En16
  wire signed [27:0] multiplier_mul_temp_108;  // sfix28_En16
  wire signed [28:0] product109;  // sfix29_En31
  wire signed [33:0] sum108_cast2;  // sfix34_En31
  wire signed [34:0] adder_add_cast_214;  // sfix35_En31
  wire signed [34:0] adder_add_cast_215;  // sfix35_En31
  wire signed [34:0] sum108_temp;  // sfix35_En31
  wire signed [33:0] sum108;  // sfix34_En31
  wire signed [13:0] output_typeconvert;  // sfix14


  assign coeff1 = 14'sb00001100101111;



  always @(posedge clk or posedge reset)
    begin : Delay_Pipeline_process
      if (reset == 1'b1) begin
        Delay_Pipeline_reg[0] <= 14'sb00000000000000;
        Delay_Pipeline_reg[1] <= 14'sb00000000000000;
        Delay_Pipeline_reg[2] <= 14'sb00000000000000;
        Delay_Pipeline_reg[3] <= 14'sb00000000000000;
        Delay_Pipeline_reg[4] <= 14'sb00000000000000;
        Delay_Pipeline_reg[5] <= 14'sb00000000000000;
        Delay_Pipeline_reg[6] <= 14'sb00000000000000;
        Delay_Pipeline_reg[7] <= 14'sb00000000000000;
        Delay_Pipeline_reg[8] <= 14'sb00000000000000;
        Delay_Pipeline_reg[9] <= 14'sb00000000000000;
        Delay_Pipeline_reg[10] <= 14'sb00000000000000;
        Delay_Pipeline_reg[11] <= 14'sb00000000000000;
        Delay_Pipeline_reg[12] <= 14'sb00000000000000;
        Delay_Pipeline_reg[13] <= 14'sb00000000000000;
        Delay_Pipeline_reg[14] <= 14'sb00000000000000;
        Delay_Pipeline_reg[15] <= 14'sb00000000000000;
        Delay_Pipeline_reg[16] <= 14'sb00000000000000;
        Delay_Pipeline_reg[17] <= 14'sb00000000000000;
        Delay_Pipeline_reg[18] <= 14'sb00000000000000;
        Delay_Pipeline_reg[19] <= 14'sb00000000000000;
        Delay_Pipeline_reg[20] <= 14'sb00000000000000;
        Delay_Pipeline_reg[21] <= 14'sb00000000000000;
        Delay_Pipeline_reg[22] <= 14'sb00000000000000;
        Delay_Pipeline_reg[23] <= 14'sb00000000000000;
        Delay_Pipeline_reg[24] <= 14'sb00000000000000;
        Delay_Pipeline_reg[25] <= 14'sb00000000000000;
        Delay_Pipeline_reg[26] <= 14'sb00000000000000;
        Delay_Pipeline_reg[27] <= 14'sb00000000000000;
        Delay_Pipeline_reg[28] <= 14'sb00000000000000;
        Delay_Pipeline_reg[29] <= 14'sb00000000000000;
        Delay_Pipeline_reg[30] <= 14'sb00000000000000;
        Delay_Pipeline_reg[31] <= 14'sb00000000000000;
        Delay_Pipeline_reg[32] <= 14'sb00000000000000;
        Delay_Pipeline_reg[33] <= 14'sb00000000000000;
        Delay_Pipeline_reg[34] <= 14'sb00000000000000;
        Delay_Pipeline_reg[35] <= 14'sb00000000000000;
        Delay_Pipeline_reg[36] <= 14'sb00000000000000;
        Delay_Pipeline_reg[37] <= 14'sb00000000000000;
        Delay_Pipeline_reg[38] <= 14'sb00000000000000;
        Delay_Pipeline_reg[39] <= 14'sb00000000000000;
        Delay_Pipeline_reg[40] <= 14'sb00000000000000;
        Delay_Pipeline_reg[41] <= 14'sb00000000000000;
        Delay_Pipeline_reg[42] <= 14'sb00000000000000;
        Delay_Pipeline_reg[43] <= 14'sb00000000000000;
        Delay_Pipeline_reg[44] <= 14'sb00000000000000;
        Delay_Pipeline_reg[45] <= 14'sb00000000000000;
        Delay_Pipeline_reg[46] <= 14'sb00000000000000;
        Delay_Pipeline_reg[47] <= 14'sb00000000000000;
        Delay_Pipeline_reg[48] <= 14'sb00000000000000;
        Delay_Pipeline_reg[49] <= 14'sb00000000000000;
        Delay_Pipeline_reg[50] <= 14'sb00000000000000;
        Delay_Pipeline_reg[51] <= 14'sb00000000000000;
        Delay_Pipeline_reg[52] <= 14'sb00000000000000;
        Delay_Pipeline_reg[53] <= 14'sb00000000000000;
        Delay_Pipeline_reg[54] <= 14'sb00000000000000;
        Delay_Pipeline_reg[55] <= 14'sb00000000000000;
        Delay_Pipeline_reg[56] <= 14'sb00000000000000;
        Delay_Pipeline_reg[57] <= 14'sb00000000000000;
        Delay_Pipeline_reg[58] <= 14'sb00000000000000;
        Delay_Pipeline_reg[59] <= 14'sb00000000000000;
        Delay_Pipeline_reg[60] <= 14'sb00000000000000;
        Delay_Pipeline_reg[61] <= 14'sb00000000000000;
        Delay_Pipeline_reg[62] <= 14'sb00000000000000;
        Delay_Pipeline_reg[63] <= 14'sb00000000000000;
        Delay_Pipeline_reg[64] <= 14'sb00000000000000;
        Delay_Pipeline_reg[65] <= 14'sb00000000000000;
        Delay_Pipeline_reg[66] <= 14'sb00000000000000;
        Delay_Pipeline_reg[67] <= 14'sb00000000000000;
        Delay_Pipeline_reg[68] <= 14'sb00000000000000;
        Delay_Pipeline_reg[69] <= 14'sb00000000000000;
        Delay_Pipeline_reg[70] <= 14'sb00000000000000;
        Delay_Pipeline_reg[71] <= 14'sb00000000000000;
        Delay_Pipeline_reg[72] <= 14'sb00000000000000;
        Delay_Pipeline_reg[73] <= 14'sb00000000000000;
        Delay_Pipeline_reg[74] <= 14'sb00000000000000;
        Delay_Pipeline_reg[75] <= 14'sb00000000000000;
        Delay_Pipeline_reg[76] <= 14'sb00000000000000;
        Delay_Pipeline_reg[77] <= 14'sb00000000000000;
        Delay_Pipeline_reg[78] <= 14'sb00000000000000;
        Delay_Pipeline_reg[79] <= 14'sb00000000000000;
        Delay_Pipeline_reg[80] <= 14'sb00000000000000;
        Delay_Pipeline_reg[81] <= 14'sb00000000000000;
        Delay_Pipeline_reg[82] <= 14'sb00000000000000;
        Delay_Pipeline_reg[83] <= 14'sb00000000000000;
        Delay_Pipeline_reg[84] <= 14'sb00000000000000;
        Delay_Pipeline_reg[85] <= 14'sb00000000000000;
        Delay_Pipeline_reg[86] <= 14'sb00000000000000;
        Delay_Pipeline_reg[87] <= 14'sb00000000000000;
        Delay_Pipeline_reg[88] <= 14'sb00000000000000;
        Delay_Pipeline_reg[89] <= 14'sb00000000000000;
        Delay_Pipeline_reg[90] <= 14'sb00000000000000;
        Delay_Pipeline_reg[91] <= 14'sb00000000000000;
        Delay_Pipeline_reg[92] <= 14'sb00000000000000;
        Delay_Pipeline_reg[93] <= 14'sb00000000000000;
        Delay_Pipeline_reg[94] <= 14'sb00000000000000;
        Delay_Pipeline_reg[95] <= 14'sb00000000000000;
        Delay_Pipeline_reg[96] <= 14'sb00000000000000;
        Delay_Pipeline_reg[97] <= 14'sb00000000000000;
        Delay_Pipeline_reg[98] <= 14'sb00000000000000;
        Delay_Pipeline_reg[99] <= 14'sb00000000000000;
        Delay_Pipeline_reg[100] <= 14'sb00000000000000;
        Delay_Pipeline_reg[101] <= 14'sb00000000000000;
        Delay_Pipeline_reg[102] <= 14'sb00000000000000;
        Delay_Pipeline_reg[103] <= 14'sb00000000000000;
        Delay_Pipeline_reg[104] <= 14'sb00000000000000;
        Delay_Pipeline_reg[105] <= 14'sb00000000000000;
        Delay_Pipeline_reg[106] <= 14'sb00000000000000;
        Delay_Pipeline_reg[107] <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay_Pipeline_reg[0] <= Delay_Pipeline_reg_next[0];
          Delay_Pipeline_reg[1] <= Delay_Pipeline_reg_next[1];
          Delay_Pipeline_reg[2] <= Delay_Pipeline_reg_next[2];
          Delay_Pipeline_reg[3] <= Delay_Pipeline_reg_next[3];
          Delay_Pipeline_reg[4] <= Delay_Pipeline_reg_next[4];
          Delay_Pipeline_reg[5] <= Delay_Pipeline_reg_next[5];
          Delay_Pipeline_reg[6] <= Delay_Pipeline_reg_next[6];
          Delay_Pipeline_reg[7] <= Delay_Pipeline_reg_next[7];
          Delay_Pipeline_reg[8] <= Delay_Pipeline_reg_next[8];
          Delay_Pipeline_reg[9] <= Delay_Pipeline_reg_next[9];
          Delay_Pipeline_reg[10] <= Delay_Pipeline_reg_next[10];
          Delay_Pipeline_reg[11] <= Delay_Pipeline_reg_next[11];
          Delay_Pipeline_reg[12] <= Delay_Pipeline_reg_next[12];
          Delay_Pipeline_reg[13] <= Delay_Pipeline_reg_next[13];
          Delay_Pipeline_reg[14] <= Delay_Pipeline_reg_next[14];
          Delay_Pipeline_reg[15] <= Delay_Pipeline_reg_next[15];
          Delay_Pipeline_reg[16] <= Delay_Pipeline_reg_next[16];
          Delay_Pipeline_reg[17] <= Delay_Pipeline_reg_next[17];
          Delay_Pipeline_reg[18] <= Delay_Pipeline_reg_next[18];
          Delay_Pipeline_reg[19] <= Delay_Pipeline_reg_next[19];
          Delay_Pipeline_reg[20] <= Delay_Pipeline_reg_next[20];
          Delay_Pipeline_reg[21] <= Delay_Pipeline_reg_next[21];
          Delay_Pipeline_reg[22] <= Delay_Pipeline_reg_next[22];
          Delay_Pipeline_reg[23] <= Delay_Pipeline_reg_next[23];
          Delay_Pipeline_reg[24] <= Delay_Pipeline_reg_next[24];
          Delay_Pipeline_reg[25] <= Delay_Pipeline_reg_next[25];
          Delay_Pipeline_reg[26] <= Delay_Pipeline_reg_next[26];
          Delay_Pipeline_reg[27] <= Delay_Pipeline_reg_next[27];
          Delay_Pipeline_reg[28] <= Delay_Pipeline_reg_next[28];
          Delay_Pipeline_reg[29] <= Delay_Pipeline_reg_next[29];
          Delay_Pipeline_reg[30] <= Delay_Pipeline_reg_next[30];
          Delay_Pipeline_reg[31] <= Delay_Pipeline_reg_next[31];
          Delay_Pipeline_reg[32] <= Delay_Pipeline_reg_next[32];
          Delay_Pipeline_reg[33] <= Delay_Pipeline_reg_next[33];
          Delay_Pipeline_reg[34] <= Delay_Pipeline_reg_next[34];
          Delay_Pipeline_reg[35] <= Delay_Pipeline_reg_next[35];
          Delay_Pipeline_reg[36] <= Delay_Pipeline_reg_next[36];
          Delay_Pipeline_reg[37] <= Delay_Pipeline_reg_next[37];
          Delay_Pipeline_reg[38] <= Delay_Pipeline_reg_next[38];
          Delay_Pipeline_reg[39] <= Delay_Pipeline_reg_next[39];
          Delay_Pipeline_reg[40] <= Delay_Pipeline_reg_next[40];
          Delay_Pipeline_reg[41] <= Delay_Pipeline_reg_next[41];
          Delay_Pipeline_reg[42] <= Delay_Pipeline_reg_next[42];
          Delay_Pipeline_reg[43] <= Delay_Pipeline_reg_next[43];
          Delay_Pipeline_reg[44] <= Delay_Pipeline_reg_next[44];
          Delay_Pipeline_reg[45] <= Delay_Pipeline_reg_next[45];
          Delay_Pipeline_reg[46] <= Delay_Pipeline_reg_next[46];
          Delay_Pipeline_reg[47] <= Delay_Pipeline_reg_next[47];
          Delay_Pipeline_reg[48] <= Delay_Pipeline_reg_next[48];
          Delay_Pipeline_reg[49] <= Delay_Pipeline_reg_next[49];
          Delay_Pipeline_reg[50] <= Delay_Pipeline_reg_next[50];
          Delay_Pipeline_reg[51] <= Delay_Pipeline_reg_next[51];
          Delay_Pipeline_reg[52] <= Delay_Pipeline_reg_next[52];
          Delay_Pipeline_reg[53] <= Delay_Pipeline_reg_next[53];
          Delay_Pipeline_reg[54] <= Delay_Pipeline_reg_next[54];
          Delay_Pipeline_reg[55] <= Delay_Pipeline_reg_next[55];
          Delay_Pipeline_reg[56] <= Delay_Pipeline_reg_next[56];
          Delay_Pipeline_reg[57] <= Delay_Pipeline_reg_next[57];
          Delay_Pipeline_reg[58] <= Delay_Pipeline_reg_next[58];
          Delay_Pipeline_reg[59] <= Delay_Pipeline_reg_next[59];
          Delay_Pipeline_reg[60] <= Delay_Pipeline_reg_next[60];
          Delay_Pipeline_reg[61] <= Delay_Pipeline_reg_next[61];
          Delay_Pipeline_reg[62] <= Delay_Pipeline_reg_next[62];
          Delay_Pipeline_reg[63] <= Delay_Pipeline_reg_next[63];
          Delay_Pipeline_reg[64] <= Delay_Pipeline_reg_next[64];
          Delay_Pipeline_reg[65] <= Delay_Pipeline_reg_next[65];
          Delay_Pipeline_reg[66] <= Delay_Pipeline_reg_next[66];
          Delay_Pipeline_reg[67] <= Delay_Pipeline_reg_next[67];
          Delay_Pipeline_reg[68] <= Delay_Pipeline_reg_next[68];
          Delay_Pipeline_reg[69] <= Delay_Pipeline_reg_next[69];
          Delay_Pipeline_reg[70] <= Delay_Pipeline_reg_next[70];
          Delay_Pipeline_reg[71] <= Delay_Pipeline_reg_next[71];
          Delay_Pipeline_reg[72] <= Delay_Pipeline_reg_next[72];
          Delay_Pipeline_reg[73] <= Delay_Pipeline_reg_next[73];
          Delay_Pipeline_reg[74] <= Delay_Pipeline_reg_next[74];
          Delay_Pipeline_reg[75] <= Delay_Pipeline_reg_next[75];
          Delay_Pipeline_reg[76] <= Delay_Pipeline_reg_next[76];
          Delay_Pipeline_reg[77] <= Delay_Pipeline_reg_next[77];
          Delay_Pipeline_reg[78] <= Delay_Pipeline_reg_next[78];
          Delay_Pipeline_reg[79] <= Delay_Pipeline_reg_next[79];
          Delay_Pipeline_reg[80] <= Delay_Pipeline_reg_next[80];
          Delay_Pipeline_reg[81] <= Delay_Pipeline_reg_next[81];
          Delay_Pipeline_reg[82] <= Delay_Pipeline_reg_next[82];
          Delay_Pipeline_reg[83] <= Delay_Pipeline_reg_next[83];
          Delay_Pipeline_reg[84] <= Delay_Pipeline_reg_next[84];
          Delay_Pipeline_reg[85] <= Delay_Pipeline_reg_next[85];
          Delay_Pipeline_reg[86] <= Delay_Pipeline_reg_next[86];
          Delay_Pipeline_reg[87] <= Delay_Pipeline_reg_next[87];
          Delay_Pipeline_reg[88] <= Delay_Pipeline_reg_next[88];
          Delay_Pipeline_reg[89] <= Delay_Pipeline_reg_next[89];
          Delay_Pipeline_reg[90] <= Delay_Pipeline_reg_next[90];
          Delay_Pipeline_reg[91] <= Delay_Pipeline_reg_next[91];
          Delay_Pipeline_reg[92] <= Delay_Pipeline_reg_next[92];
          Delay_Pipeline_reg[93] <= Delay_Pipeline_reg_next[93];
          Delay_Pipeline_reg[94] <= Delay_Pipeline_reg_next[94];
          Delay_Pipeline_reg[95] <= Delay_Pipeline_reg_next[95];
          Delay_Pipeline_reg[96] <= Delay_Pipeline_reg_next[96];
          Delay_Pipeline_reg[97] <= Delay_Pipeline_reg_next[97];
          Delay_Pipeline_reg[98] <= Delay_Pipeline_reg_next[98];
          Delay_Pipeline_reg[99] <= Delay_Pipeline_reg_next[99];
          Delay_Pipeline_reg[100] <= Delay_Pipeline_reg_next[100];
          Delay_Pipeline_reg[101] <= Delay_Pipeline_reg_next[101];
          Delay_Pipeline_reg[102] <= Delay_Pipeline_reg_next[102];
          Delay_Pipeline_reg[103] <= Delay_Pipeline_reg_next[103];
          Delay_Pipeline_reg[104] <= Delay_Pipeline_reg_next[104];
          Delay_Pipeline_reg[105] <= Delay_Pipeline_reg_next[105];
          Delay_Pipeline_reg[106] <= Delay_Pipeline_reg_next[106];
          Delay_Pipeline_reg[107] <= Delay_Pipeline_reg_next[107];
        end
      end
    end

  assign delay_pipeline_1[0] = Delay_Pipeline_reg[0];
  assign delay_pipeline_1[1] = Delay_Pipeline_reg[1];
  assign delay_pipeline_1[2] = Delay_Pipeline_reg[2];
  assign delay_pipeline_1[3] = Delay_Pipeline_reg[3];
  assign delay_pipeline_1[4] = Delay_Pipeline_reg[4];
  assign delay_pipeline_1[5] = Delay_Pipeline_reg[5];
  assign delay_pipeline_1[6] = Delay_Pipeline_reg[6];
  assign delay_pipeline_1[7] = Delay_Pipeline_reg[7];
  assign delay_pipeline_1[8] = Delay_Pipeline_reg[8];
  assign delay_pipeline_1[9] = Delay_Pipeline_reg[9];
  assign delay_pipeline_1[10] = Delay_Pipeline_reg[10];
  assign delay_pipeline_1[11] = Delay_Pipeline_reg[11];
  assign delay_pipeline_1[12] = Delay_Pipeline_reg[12];
  assign delay_pipeline_1[13] = Delay_Pipeline_reg[13];
  assign delay_pipeline_1[14] = Delay_Pipeline_reg[14];
  assign delay_pipeline_1[15] = Delay_Pipeline_reg[15];
  assign delay_pipeline_1[16] = Delay_Pipeline_reg[16];
  assign delay_pipeline_1[17] = Delay_Pipeline_reg[17];
  assign delay_pipeline_1[18] = Delay_Pipeline_reg[18];
  assign delay_pipeline_1[19] = Delay_Pipeline_reg[19];
  assign delay_pipeline_1[20] = Delay_Pipeline_reg[20];
  assign delay_pipeline_1[21] = Delay_Pipeline_reg[21];
  assign delay_pipeline_1[22] = Delay_Pipeline_reg[22];
  assign delay_pipeline_1[23] = Delay_Pipeline_reg[23];
  assign delay_pipeline_1[24] = Delay_Pipeline_reg[24];
  assign delay_pipeline_1[25] = Delay_Pipeline_reg[25];
  assign delay_pipeline_1[26] = Delay_Pipeline_reg[26];
  assign delay_pipeline_1[27] = Delay_Pipeline_reg[27];
  assign delay_pipeline_1[28] = Delay_Pipeline_reg[28];
  assign delay_pipeline_1[29] = Delay_Pipeline_reg[29];
  assign delay_pipeline_1[30] = Delay_Pipeline_reg[30];
  assign delay_pipeline_1[31] = Delay_Pipeline_reg[31];
  assign delay_pipeline_1[32] = Delay_Pipeline_reg[32];
  assign delay_pipeline_1[33] = Delay_Pipeline_reg[33];
  assign delay_pipeline_1[34] = Delay_Pipeline_reg[34];
  assign delay_pipeline_1[35] = Delay_Pipeline_reg[35];
  assign delay_pipeline_1[36] = Delay_Pipeline_reg[36];
  assign delay_pipeline_1[37] = Delay_Pipeline_reg[37];
  assign delay_pipeline_1[38] = Delay_Pipeline_reg[38];
  assign delay_pipeline_1[39] = Delay_Pipeline_reg[39];
  assign delay_pipeline_1[40] = Delay_Pipeline_reg[40];
  assign delay_pipeline_1[41] = Delay_Pipeline_reg[41];
  assign delay_pipeline_1[42] = Delay_Pipeline_reg[42];
  assign delay_pipeline_1[43] = Delay_Pipeline_reg[43];
  assign delay_pipeline_1[44] = Delay_Pipeline_reg[44];
  assign delay_pipeline_1[45] = Delay_Pipeline_reg[45];
  assign delay_pipeline_1[46] = Delay_Pipeline_reg[46];
  assign delay_pipeline_1[47] = Delay_Pipeline_reg[47];
  assign delay_pipeline_1[48] = Delay_Pipeline_reg[48];
  assign delay_pipeline_1[49] = Delay_Pipeline_reg[49];
  assign delay_pipeline_1[50] = Delay_Pipeline_reg[50];
  assign delay_pipeline_1[51] = Delay_Pipeline_reg[51];
  assign delay_pipeline_1[52] = Delay_Pipeline_reg[52];
  assign delay_pipeline_1[53] = Delay_Pipeline_reg[53];
  assign delay_pipeline_1[54] = Delay_Pipeline_reg[54];
  assign delay_pipeline_1[55] = Delay_Pipeline_reg[55];
  assign delay_pipeline_1[56] = Delay_Pipeline_reg[56];
  assign delay_pipeline_1[57] = Delay_Pipeline_reg[57];
  assign delay_pipeline_1[58] = Delay_Pipeline_reg[58];
  assign delay_pipeline_1[59] = Delay_Pipeline_reg[59];
  assign delay_pipeline_1[60] = Delay_Pipeline_reg[60];
  assign delay_pipeline_1[61] = Delay_Pipeline_reg[61];
  assign delay_pipeline_1[62] = Delay_Pipeline_reg[62];
  assign delay_pipeline_1[63] = Delay_Pipeline_reg[63];
  assign delay_pipeline_1[64] = Delay_Pipeline_reg[64];
  assign delay_pipeline_1[65] = Delay_Pipeline_reg[65];
  assign delay_pipeline_1[66] = Delay_Pipeline_reg[66];
  assign delay_pipeline_1[67] = Delay_Pipeline_reg[67];
  assign delay_pipeline_1[68] = Delay_Pipeline_reg[68];
  assign delay_pipeline_1[69] = Delay_Pipeline_reg[69];
  assign delay_pipeline_1[70] = Delay_Pipeline_reg[70];
  assign delay_pipeline_1[71] = Delay_Pipeline_reg[71];
  assign delay_pipeline_1[72] = Delay_Pipeline_reg[72];
  assign delay_pipeline_1[73] = Delay_Pipeline_reg[73];
  assign delay_pipeline_1[74] = Delay_Pipeline_reg[74];
  assign delay_pipeline_1[75] = Delay_Pipeline_reg[75];
  assign delay_pipeline_1[76] = Delay_Pipeline_reg[76];
  assign delay_pipeline_1[77] = Delay_Pipeline_reg[77];
  assign delay_pipeline_1[78] = Delay_Pipeline_reg[78];
  assign delay_pipeline_1[79] = Delay_Pipeline_reg[79];
  assign delay_pipeline_1[80] = Delay_Pipeline_reg[80];
  assign delay_pipeline_1[81] = Delay_Pipeline_reg[81];
  assign delay_pipeline_1[82] = Delay_Pipeline_reg[82];
  assign delay_pipeline_1[83] = Delay_Pipeline_reg[83];
  assign delay_pipeline_1[84] = Delay_Pipeline_reg[84];
  assign delay_pipeline_1[85] = Delay_Pipeline_reg[85];
  assign delay_pipeline_1[86] = Delay_Pipeline_reg[86];
  assign delay_pipeline_1[87] = Delay_Pipeline_reg[87];
  assign delay_pipeline_1[88] = Delay_Pipeline_reg[88];
  assign delay_pipeline_1[89] = Delay_Pipeline_reg[89];
  assign delay_pipeline_1[90] = Delay_Pipeline_reg[90];
  assign delay_pipeline_1[91] = Delay_Pipeline_reg[91];
  assign delay_pipeline_1[92] = Delay_Pipeline_reg[92];
  assign delay_pipeline_1[93] = Delay_Pipeline_reg[93];
  assign delay_pipeline_1[94] = Delay_Pipeline_reg[94];
  assign delay_pipeline_1[95] = Delay_Pipeline_reg[95];
  assign delay_pipeline_1[96] = Delay_Pipeline_reg[96];
  assign delay_pipeline_1[97] = Delay_Pipeline_reg[97];
  assign delay_pipeline_1[98] = Delay_Pipeline_reg[98];
  assign delay_pipeline_1[99] = Delay_Pipeline_reg[99];
  assign delay_pipeline_1[100] = Delay_Pipeline_reg[100];
  assign delay_pipeline_1[101] = Delay_Pipeline_reg[101];
  assign delay_pipeline_1[102] = Delay_Pipeline_reg[102];
  assign delay_pipeline_1[103] = Delay_Pipeline_reg[103];
  assign delay_pipeline_1[104] = Delay_Pipeline_reg[104];
  assign delay_pipeline_1[105] = Delay_Pipeline_reg[105];
  assign delay_pipeline_1[106] = Delay_Pipeline_reg[106];
  assign delay_pipeline_1[107] = Delay_Pipeline_reg[107];
  assign Delay_Pipeline_reg_next[0] = filter_in;
  assign Delay_Pipeline_reg_next[1] = Delay_Pipeline_reg[0];
  assign Delay_Pipeline_reg_next[2] = Delay_Pipeline_reg[1];
  assign Delay_Pipeline_reg_next[3] = Delay_Pipeline_reg[2];
  assign Delay_Pipeline_reg_next[4] = Delay_Pipeline_reg[3];
  assign Delay_Pipeline_reg_next[5] = Delay_Pipeline_reg[4];
  assign Delay_Pipeline_reg_next[6] = Delay_Pipeline_reg[5];
  assign Delay_Pipeline_reg_next[7] = Delay_Pipeline_reg[6];
  assign Delay_Pipeline_reg_next[8] = Delay_Pipeline_reg[7];
  assign Delay_Pipeline_reg_next[9] = Delay_Pipeline_reg[8];
  assign Delay_Pipeline_reg_next[10] = Delay_Pipeline_reg[9];
  assign Delay_Pipeline_reg_next[11] = Delay_Pipeline_reg[10];
  assign Delay_Pipeline_reg_next[12] = Delay_Pipeline_reg[11];
  assign Delay_Pipeline_reg_next[13] = Delay_Pipeline_reg[12];
  assign Delay_Pipeline_reg_next[14] = Delay_Pipeline_reg[13];
  assign Delay_Pipeline_reg_next[15] = Delay_Pipeline_reg[14];
  assign Delay_Pipeline_reg_next[16] = Delay_Pipeline_reg[15];
  assign Delay_Pipeline_reg_next[17] = Delay_Pipeline_reg[16];
  assign Delay_Pipeline_reg_next[18] = Delay_Pipeline_reg[17];
  assign Delay_Pipeline_reg_next[19] = Delay_Pipeline_reg[18];
  assign Delay_Pipeline_reg_next[20] = Delay_Pipeline_reg[19];
  assign Delay_Pipeline_reg_next[21] = Delay_Pipeline_reg[20];
  assign Delay_Pipeline_reg_next[22] = Delay_Pipeline_reg[21];
  assign Delay_Pipeline_reg_next[23] = Delay_Pipeline_reg[22];
  assign Delay_Pipeline_reg_next[24] = Delay_Pipeline_reg[23];
  assign Delay_Pipeline_reg_next[25] = Delay_Pipeline_reg[24];
  assign Delay_Pipeline_reg_next[26] = Delay_Pipeline_reg[25];
  assign Delay_Pipeline_reg_next[27] = Delay_Pipeline_reg[26];
  assign Delay_Pipeline_reg_next[28] = Delay_Pipeline_reg[27];
  assign Delay_Pipeline_reg_next[29] = Delay_Pipeline_reg[28];
  assign Delay_Pipeline_reg_next[30] = Delay_Pipeline_reg[29];
  assign Delay_Pipeline_reg_next[31] = Delay_Pipeline_reg[30];
  assign Delay_Pipeline_reg_next[32] = Delay_Pipeline_reg[31];
  assign Delay_Pipeline_reg_next[33] = Delay_Pipeline_reg[32];
  assign Delay_Pipeline_reg_next[34] = Delay_Pipeline_reg[33];
  assign Delay_Pipeline_reg_next[35] = Delay_Pipeline_reg[34];
  assign Delay_Pipeline_reg_next[36] = Delay_Pipeline_reg[35];
  assign Delay_Pipeline_reg_next[37] = Delay_Pipeline_reg[36];
  assign Delay_Pipeline_reg_next[38] = Delay_Pipeline_reg[37];
  assign Delay_Pipeline_reg_next[39] = Delay_Pipeline_reg[38];
  assign Delay_Pipeline_reg_next[40] = Delay_Pipeline_reg[39];
  assign Delay_Pipeline_reg_next[41] = Delay_Pipeline_reg[40];
  assign Delay_Pipeline_reg_next[42] = Delay_Pipeline_reg[41];
  assign Delay_Pipeline_reg_next[43] = Delay_Pipeline_reg[42];
  assign Delay_Pipeline_reg_next[44] = Delay_Pipeline_reg[43];
  assign Delay_Pipeline_reg_next[45] = Delay_Pipeline_reg[44];
  assign Delay_Pipeline_reg_next[46] = Delay_Pipeline_reg[45];
  assign Delay_Pipeline_reg_next[47] = Delay_Pipeline_reg[46];
  assign Delay_Pipeline_reg_next[48] = Delay_Pipeline_reg[47];
  assign Delay_Pipeline_reg_next[49] = Delay_Pipeline_reg[48];
  assign Delay_Pipeline_reg_next[50] = Delay_Pipeline_reg[49];
  assign Delay_Pipeline_reg_next[51] = Delay_Pipeline_reg[50];
  assign Delay_Pipeline_reg_next[52] = Delay_Pipeline_reg[51];
  assign Delay_Pipeline_reg_next[53] = Delay_Pipeline_reg[52];
  assign Delay_Pipeline_reg_next[54] = Delay_Pipeline_reg[53];
  assign Delay_Pipeline_reg_next[55] = Delay_Pipeline_reg[54];
  assign Delay_Pipeline_reg_next[56] = Delay_Pipeline_reg[55];
  assign Delay_Pipeline_reg_next[57] = Delay_Pipeline_reg[56];
  assign Delay_Pipeline_reg_next[58] = Delay_Pipeline_reg[57];
  assign Delay_Pipeline_reg_next[59] = Delay_Pipeline_reg[58];
  assign Delay_Pipeline_reg_next[60] = Delay_Pipeline_reg[59];
  assign Delay_Pipeline_reg_next[61] = Delay_Pipeline_reg[60];
  assign Delay_Pipeline_reg_next[62] = Delay_Pipeline_reg[61];
  assign Delay_Pipeline_reg_next[63] = Delay_Pipeline_reg[62];
  assign Delay_Pipeline_reg_next[64] = Delay_Pipeline_reg[63];
  assign Delay_Pipeline_reg_next[65] = Delay_Pipeline_reg[64];
  assign Delay_Pipeline_reg_next[66] = Delay_Pipeline_reg[65];
  assign Delay_Pipeline_reg_next[67] = Delay_Pipeline_reg[66];
  assign Delay_Pipeline_reg_next[68] = Delay_Pipeline_reg[67];
  assign Delay_Pipeline_reg_next[69] = Delay_Pipeline_reg[68];
  assign Delay_Pipeline_reg_next[70] = Delay_Pipeline_reg[69];
  assign Delay_Pipeline_reg_next[71] = Delay_Pipeline_reg[70];
  assign Delay_Pipeline_reg_next[72] = Delay_Pipeline_reg[71];
  assign Delay_Pipeline_reg_next[73] = Delay_Pipeline_reg[72];
  assign Delay_Pipeline_reg_next[74] = Delay_Pipeline_reg[73];
  assign Delay_Pipeline_reg_next[75] = Delay_Pipeline_reg[74];
  assign Delay_Pipeline_reg_next[76] = Delay_Pipeline_reg[75];
  assign Delay_Pipeline_reg_next[77] = Delay_Pipeline_reg[76];
  assign Delay_Pipeline_reg_next[78] = Delay_Pipeline_reg[77];
  assign Delay_Pipeline_reg_next[79] = Delay_Pipeline_reg[78];
  assign Delay_Pipeline_reg_next[80] = Delay_Pipeline_reg[79];
  assign Delay_Pipeline_reg_next[81] = Delay_Pipeline_reg[80];
  assign Delay_Pipeline_reg_next[82] = Delay_Pipeline_reg[81];
  assign Delay_Pipeline_reg_next[83] = Delay_Pipeline_reg[82];
  assign Delay_Pipeline_reg_next[84] = Delay_Pipeline_reg[83];
  assign Delay_Pipeline_reg_next[85] = Delay_Pipeline_reg[84];
  assign Delay_Pipeline_reg_next[86] = Delay_Pipeline_reg[85];
  assign Delay_Pipeline_reg_next[87] = Delay_Pipeline_reg[86];
  assign Delay_Pipeline_reg_next[88] = Delay_Pipeline_reg[87];
  assign Delay_Pipeline_reg_next[89] = Delay_Pipeline_reg[88];
  assign Delay_Pipeline_reg_next[90] = Delay_Pipeline_reg[89];
  assign Delay_Pipeline_reg_next[91] = Delay_Pipeline_reg[90];
  assign Delay_Pipeline_reg_next[92] = Delay_Pipeline_reg[91];
  assign Delay_Pipeline_reg_next[93] = Delay_Pipeline_reg[92];
  assign Delay_Pipeline_reg_next[94] = Delay_Pipeline_reg[93];
  assign Delay_Pipeline_reg_next[95] = Delay_Pipeline_reg[94];
  assign Delay_Pipeline_reg_next[96] = Delay_Pipeline_reg[95];
  assign Delay_Pipeline_reg_next[97] = Delay_Pipeline_reg[96];
  assign Delay_Pipeline_reg_next[98] = Delay_Pipeline_reg[97];
  assign Delay_Pipeline_reg_next[99] = Delay_Pipeline_reg[98];
  assign Delay_Pipeline_reg_next[100] = Delay_Pipeline_reg[99];
  assign Delay_Pipeline_reg_next[101] = Delay_Pipeline_reg[100];
  assign Delay_Pipeline_reg_next[102] = Delay_Pipeline_reg[101];
  assign Delay_Pipeline_reg_next[103] = Delay_Pipeline_reg[102];
  assign Delay_Pipeline_reg_next[104] = Delay_Pipeline_reg[103];
  assign Delay_Pipeline_reg_next[105] = Delay_Pipeline_reg[104];
  assign Delay_Pipeline_reg_next[106] = Delay_Pipeline_reg[105];
  assign Delay_Pipeline_reg_next[107] = Delay_Pipeline_reg[106];



  assign delay_pipeline_0 = delay_pipeline_1[0];

  assign delay_pipeline_1_1 = delay_pipeline_1[1];

  assign delay_pipeline_2 = delay_pipeline_1[2];

  assign delay_pipeline_3 = delay_pipeline_1[3];

  assign delay_pipeline_4 = delay_pipeline_1[4];

  assign delay_pipeline_5 = delay_pipeline_1[5];

  assign delay_pipeline_6 = delay_pipeline_1[6];

  assign delay_pipeline_7 = delay_pipeline_1[7];

  assign delay_pipeline_8 = delay_pipeline_1[8];

  assign delay_pipeline_9 = delay_pipeline_1[9];

  assign delay_pipeline_10 = delay_pipeline_1[10];

  assign delay_pipeline_11 = delay_pipeline_1[11];

  assign delay_pipeline_12 = delay_pipeline_1[12];

  assign delay_pipeline_13 = delay_pipeline_1[13];

  assign delay_pipeline_14 = delay_pipeline_1[14];

  assign delay_pipeline_15 = delay_pipeline_1[15];

  assign delay_pipeline_16 = delay_pipeline_1[16];

  assign delay_pipeline_17 = delay_pipeline_1[17];

  assign delay_pipeline_18 = delay_pipeline_1[18];

  assign delay_pipeline_19 = delay_pipeline_1[19];

  assign delay_pipeline_20 = delay_pipeline_1[20];

  assign delay_pipeline_21 = delay_pipeline_1[21];

  assign delay_pipeline_22 = delay_pipeline_1[22];

  assign delay_pipeline_23 = delay_pipeline_1[23];

  assign delay_pipeline_24 = delay_pipeline_1[24];

  assign delay_pipeline_25 = delay_pipeline_1[25];

  assign delay_pipeline_26 = delay_pipeline_1[26];

  assign delay_pipeline_27 = delay_pipeline_1[27];

  assign delay_pipeline_28 = delay_pipeline_1[28];

  assign delay_pipeline_29 = delay_pipeline_1[29];

  assign delay_pipeline_30 = delay_pipeline_1[30];

  assign delay_pipeline_31 = delay_pipeline_1[31];

  assign delay_pipeline_32 = delay_pipeline_1[32];

  assign delay_pipeline_33 = delay_pipeline_1[33];

  assign delay_pipeline_34 = delay_pipeline_1[34];

  assign delay_pipeline_35 = delay_pipeline_1[35];

  assign delay_pipeline_36 = delay_pipeline_1[36];

  assign delay_pipeline_37 = delay_pipeline_1[37];

  assign delay_pipeline_38 = delay_pipeline_1[38];

  assign delay_pipeline_39 = delay_pipeline_1[39];

  assign delay_pipeline_40 = delay_pipeline_1[40];

  assign delay_pipeline_41 = delay_pipeline_1[41];

  assign delay_pipeline_42 = delay_pipeline_1[42];

  assign delay_pipeline_43 = delay_pipeline_1[43];

  assign delay_pipeline_44 = delay_pipeline_1[44];

  assign delay_pipeline_45 = delay_pipeline_1[45];

  assign delay_pipeline_46 = delay_pipeline_1[46];

  assign delay_pipeline_47 = delay_pipeline_1[47];

  assign delay_pipeline_48 = delay_pipeline_1[48];

  assign delay_pipeline_49 = delay_pipeline_1[49];

  assign delay_pipeline_50 = delay_pipeline_1[50];

  assign delay_pipeline_51 = delay_pipeline_1[51];

  assign delay_pipeline_52 = delay_pipeline_1[52];

  assign delay_pipeline_53 = delay_pipeline_1[53];

  assign delay_pipeline_54 = delay_pipeline_1[54];

  assign delay_pipeline_55 = delay_pipeline_1[55];

  assign delay_pipeline_56 = delay_pipeline_1[56];

  assign delay_pipeline_57 = delay_pipeline_1[57];

  assign delay_pipeline_58 = delay_pipeline_1[58];

  assign delay_pipeline_59 = delay_pipeline_1[59];

  assign delay_pipeline_60 = delay_pipeline_1[60];

  assign delay_pipeline_61 = delay_pipeline_1[61];

  assign delay_pipeline_62 = delay_pipeline_1[62];

  assign delay_pipeline_63 = delay_pipeline_1[63];

  assign delay_pipeline_64 = delay_pipeline_1[64];

  assign delay_pipeline_65 = delay_pipeline_1[65];

  assign delay_pipeline_66 = delay_pipeline_1[66];

  assign delay_pipeline_67 = delay_pipeline_1[67];

  assign delay_pipeline_68 = delay_pipeline_1[68];

  assign delay_pipeline_69 = delay_pipeline_1[69];

  assign delay_pipeline_70 = delay_pipeline_1[70];

  assign delay_pipeline_71 = delay_pipeline_1[71];

  assign delay_pipeline_72 = delay_pipeline_1[72];

  assign delay_pipeline_73 = delay_pipeline_1[73];

  assign delay_pipeline_74 = delay_pipeline_1[74];

  assign delay_pipeline_75 = delay_pipeline_1[75];

  assign delay_pipeline_76 = delay_pipeline_1[76];

  assign delay_pipeline_77 = delay_pipeline_1[77];

  assign delay_pipeline_78 = delay_pipeline_1[78];

  assign delay_pipeline_79 = delay_pipeline_1[79];

  assign delay_pipeline_80 = delay_pipeline_1[80];

  assign delay_pipeline_81 = delay_pipeline_1[81];

  assign delay_pipeline_82 = delay_pipeline_1[82];

  assign delay_pipeline_83 = delay_pipeline_1[83];

  assign delay_pipeline_84 = delay_pipeline_1[84];

  assign delay_pipeline_85 = delay_pipeline_1[85];

  assign delay_pipeline_86 = delay_pipeline_1[86];

  assign delay_pipeline_87 = delay_pipeline_1[87];

  assign delay_pipeline_88 = delay_pipeline_1[88];

  assign delay_pipeline_89 = delay_pipeline_1[89];

  assign delay_pipeline_90 = delay_pipeline_1[90];

  assign delay_pipeline_91 = delay_pipeline_1[91];

  assign delay_pipeline_92 = delay_pipeline_1[92];

  assign delay_pipeline_93 = delay_pipeline_1[93];

  assign delay_pipeline_94 = delay_pipeline_1[94];

  assign delay_pipeline_95 = delay_pipeline_1[95];

  assign delay_pipeline_96 = delay_pipeline_1[96];

  assign delay_pipeline_97 = delay_pipeline_1[97];

  assign delay_pipeline_98 = delay_pipeline_1[98];

  assign delay_pipeline_99 = delay_pipeline_1[99];

  assign delay_pipeline_100 = delay_pipeline_1[100];

  assign delay_pipeline_101 = delay_pipeline_1[101];

  assign delay_pipeline_102 = delay_pipeline_1[102];

  assign delay_pipeline_103 = delay_pipeline_1[103];

  assign delay_pipeline_104 = delay_pipeline_1[104];

  assign delay_pipeline_105 = delay_pipeline_1[105];

  assign delay_pipeline_106 = delay_pipeline_1[106];

  assign delay_pipeline_107 = delay_pipeline_1[107];

  assign multiplier_mul_temp = filter_in * coeff1;
  assign product1 = ((multiplier_mul_temp[27] == 1'b0) && (multiplier_mul_temp[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp[27] == 1'b1) && (multiplier_mul_temp[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp[13:0], 15'b000000000000000}));



  assign sum1_cast1 = {{5{product1[28]}}, product1};



  assign coeff2 = 14'sb11011101110000;



  assign multiplier_mul_temp_1 = delay_pipeline_0 * coeff2;
  assign product2 = ((multiplier_mul_temp_1[27] == 1'b0) && (multiplier_mul_temp_1[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_1[27] == 1'b1) && (multiplier_mul_temp_1[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_1[13:0], 15'b000000000000000}));



  assign sum1_cast2 = {{5{product2[28]}}, product2};



  assign adder_add_cast = {sum1_cast1[33], sum1_cast1};
  assign adder_add_cast_1 = {sum1_cast2[33], sum1_cast2};
  assign sum1_temp = adder_add_cast + adder_add_cast_1;



  assign sum1 = ((sum1_temp[34] == 1'b0) && (sum1_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum1_temp[34] == 1'b1) && (sum1_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum1_temp[33:0])));



  assign coeff3 = 14'sb00010101101110;



  assign multiplier_mul_temp_2 = delay_pipeline_1_1 * coeff3;
  assign product3 = ((multiplier_mul_temp_2[27] == 1'b0) && (multiplier_mul_temp_2[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_2[27] == 1'b1) && (multiplier_mul_temp_2[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_2[13:0], 15'b000000000000000}));



  assign sum2_cast2 = {{5{product3[28]}}, product3};



  assign adder_add_cast_2 = {sum1[33], sum1};
  assign adder_add_cast_3 = {sum2_cast2[33], sum2_cast2};
  assign sum2_temp = adder_add_cast_2 + adder_add_cast_3;



  assign sum2 = ((sum2_temp[34] == 1'b0) && (sum2_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum2_temp[34] == 1'b1) && (sum2_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum2_temp[33:0])));



  assign coeff4 = 14'sb00011100010010;



  assign multiplier_mul_temp_3 = delay_pipeline_2 * coeff4;
  assign product4 = ((multiplier_mul_temp_3[27] == 1'b0) && (multiplier_mul_temp_3[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_3[27] == 1'b1) && (multiplier_mul_temp_3[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_3[13:0], 15'b000000000000000}));



  assign sum3_cast2 = {{5{product4[28]}}, product4};



  assign adder_add_cast_4 = {sum2[33], sum2};
  assign adder_add_cast_5 = {sum3_cast2[33], sum3_cast2};
  assign sum3_temp = adder_add_cast_4 + adder_add_cast_5;



  assign sum3 = ((sum3_temp[34] == 1'b0) && (sum3_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum3_temp[34] == 1'b1) && (sum3_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum3_temp[33:0])));



  assign coeff5 = 14'sb00010100110111;



  assign multiplier_mul_temp_4 = delay_pipeline_3 * coeff5;
  assign product5 = ((multiplier_mul_temp_4[27] == 1'b0) && (multiplier_mul_temp_4[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_4[27] == 1'b1) && (multiplier_mul_temp_4[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_4[13:0], 15'b000000000000000}));



  assign sum4_cast2 = {{5{product5[28]}}, product5};



  assign adder_add_cast_6 = {sum3[33], sum3};
  assign adder_add_cast_7 = {sum4_cast2[33], sum4_cast2};
  assign sum4_temp = adder_add_cast_6 + adder_add_cast_7;



  assign sum4 = ((sum4_temp[34] == 1'b0) && (sum4_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum4_temp[34] == 1'b1) && (sum4_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum4_temp[33:0])));



  assign coeff6 = 14'sb00001100101011;



  assign multiplier_mul_temp_5 = delay_pipeline_4 * coeff6;
  assign product6 = ((multiplier_mul_temp_5[27] == 1'b0) && (multiplier_mul_temp_5[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_5[27] == 1'b1) && (multiplier_mul_temp_5[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_5[13:0], 15'b000000000000000}));



  assign sum5_cast2 = {{5{product6[28]}}, product6};



  assign adder_add_cast_8 = {sum4[33], sum4};
  assign adder_add_cast_9 = {sum5_cast2[33], sum5_cast2};
  assign sum5_temp = adder_add_cast_8 + adder_add_cast_9;



  assign sum5 = ((sum5_temp[34] == 1'b0) && (sum5_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum5_temp[34] == 1'b1) && (sum5_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum5_temp[33:0])));



  assign coeff7 = 14'sb00000110101001;



  assign multiplier_mul_temp_6 = delay_pipeline_5 * coeff7;
  assign product7 = ((multiplier_mul_temp_6[27] == 1'b0) && (multiplier_mul_temp_6[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_6[27] == 1'b1) && (multiplier_mul_temp_6[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_6[13:0], 15'b000000000000000}));



  assign sum6_cast2 = {{5{product7[28]}}, product7};



  assign adder_add_cast_10 = {sum5[33], sum5};
  assign adder_add_cast_11 = {sum6_cast2[33], sum6_cast2};
  assign sum6_temp = adder_add_cast_10 + adder_add_cast_11;



  assign sum6 = ((sum6_temp[34] == 1'b0) && (sum6_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum6_temp[34] == 1'b1) && (sum6_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum6_temp[33:0])));



  assign coeff8 = 14'sb00000010100001;



  assign multiplier_mul_temp_7 = delay_pipeline_6 * coeff8;
  assign product8 = ((multiplier_mul_temp_7[27] == 1'b0) && (multiplier_mul_temp_7[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_7[27] == 1'b1) && (multiplier_mul_temp_7[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_7[13:0], 15'b000000000000000}));



  assign sum7_cast2 = {{5{product8[28]}}, product8};



  assign adder_add_cast_12 = {sum6[33], sum6};
  assign adder_add_cast_13 = {sum7_cast2[33], sum7_cast2};
  assign sum7_temp = adder_add_cast_12 + adder_add_cast_13;



  assign sum7 = ((sum7_temp[34] == 1'b0) && (sum7_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum7_temp[34] == 1'b1) && (sum7_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum7_temp[33:0])));



  assign coeff9 = 14'sb11111111101001;



  assign multiplier_mul_temp_8 = delay_pipeline_7 * coeff9;
  assign product9 = ((multiplier_mul_temp_8[27] == 1'b0) && (multiplier_mul_temp_8[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_8[27] == 1'b1) && (multiplier_mul_temp_8[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_8[13:0], 15'b000000000000000}));



  assign sum8_cast2 = {{5{product9[28]}}, product9};



  assign adder_add_cast_14 = {sum7[33], sum7};
  assign adder_add_cast_15 = {sum8_cast2[33], sum8_cast2};
  assign sum8_temp = adder_add_cast_14 + adder_add_cast_15;



  assign sum8 = ((sum8_temp[34] == 1'b0) && (sum8_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum8_temp[34] == 1'b1) && (sum8_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum8_temp[33:0])));



  assign coeff10 = 14'sb11111101110111;



  assign multiplier_mul_temp_9 = delay_pipeline_8 * coeff10;
  assign product10 = ((multiplier_mul_temp_9[27] == 1'b0) && (multiplier_mul_temp_9[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_9[27] == 1'b1) && (multiplier_mul_temp_9[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_9[13:0], 15'b000000000000000}));



  assign sum9_cast2 = {{5{product10[28]}}, product10};



  assign adder_add_cast_16 = {sum8[33], sum8};
  assign adder_add_cast_17 = {sum9_cast2[33], sum9_cast2};
  assign sum9_temp = adder_add_cast_16 + adder_add_cast_17;



  assign sum9 = ((sum9_temp[34] == 1'b0) && (sum9_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum9_temp[34] == 1'b1) && (sum9_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum9_temp[33:0])));



  assign coeff11 = 14'sb11111101001111;



  assign multiplier_mul_temp_10 = delay_pipeline_9 * coeff11;
  assign product11 = ((multiplier_mul_temp_10[27] == 1'b0) && (multiplier_mul_temp_10[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_10[27] == 1'b1) && (multiplier_mul_temp_10[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_10[13:0], 15'b000000000000000}));



  assign sum10_cast2 = {{5{product11[28]}}, product11};



  assign adder_add_cast_18 = {sum9[33], sum9};
  assign adder_add_cast_19 = {sum10_cast2[33], sum10_cast2};
  assign sum10_temp = adder_add_cast_18 + adder_add_cast_19;



  assign sum10 = ((sum10_temp[34] == 1'b0) && (sum10_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum10_temp[34] == 1'b1) && (sum10_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum10_temp[33:0])));



  assign coeff12 = 14'sb11111101110010;



  assign multiplier_mul_temp_11 = delay_pipeline_10 * coeff12;
  assign product12 = ((multiplier_mul_temp_11[27] == 1'b0) && (multiplier_mul_temp_11[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_11[27] == 1'b1) && (multiplier_mul_temp_11[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_11[13:0], 15'b000000000000000}));



  assign sum11_cast2 = {{5{product12[28]}}, product12};



  assign adder_add_cast_20 = {sum10[33], sum10};
  assign adder_add_cast_21 = {sum11_cast2[33], sum11_cast2};
  assign sum11_temp = adder_add_cast_20 + adder_add_cast_21;



  assign sum11 = ((sum11_temp[34] == 1'b0) && (sum11_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum11_temp[34] == 1'b1) && (sum11_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum11_temp[33:0])));



  assign coeff13 = 14'sb11111111001111;



  assign multiplier_mul_temp_12 = delay_pipeline_11 * coeff13;
  assign product13 = ((multiplier_mul_temp_12[27] == 1'b0) && (multiplier_mul_temp_12[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_12[27] == 1'b1) && (multiplier_mul_temp_12[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_12[13:0], 15'b000000000000000}));



  assign sum12_cast2 = {{5{product13[28]}}, product13};



  assign adder_add_cast_22 = {sum11[33], sum11};
  assign adder_add_cast_23 = {sum12_cast2[33], sum12_cast2};
  assign sum12_temp = adder_add_cast_22 + adder_add_cast_23;



  assign sum12 = ((sum12_temp[34] == 1'b0) && (sum12_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum12_temp[34] == 1'b1) && (sum12_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum12_temp[33:0])));



  assign coeff14 = 14'sb00000001000001;



  assign multiplier_mul_temp_13 = delay_pipeline_12 * coeff14;
  assign product14 = ((multiplier_mul_temp_13[27] == 1'b0) && (multiplier_mul_temp_13[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_13[27] == 1'b1) && (multiplier_mul_temp_13[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_13[13:0], 15'b000000000000000}));



  assign sum13_cast2 = {{5{product14[28]}}, product14};



  assign adder_add_cast_24 = {sum12[33], sum12};
  assign adder_add_cast_25 = {sum13_cast2[33], sum13_cast2};
  assign sum13_temp = adder_add_cast_24 + adder_add_cast_25;



  assign sum13 = ((sum13_temp[34] == 1'b0) && (sum13_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum13_temp[34] == 1'b1) && (sum13_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum13_temp[33:0])));



  assign coeff15 = 14'sb00000010010111;



  assign multiplier_mul_temp_14 = delay_pipeline_13 * coeff15;
  assign product15 = ((multiplier_mul_temp_14[27] == 1'b0) && (multiplier_mul_temp_14[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_14[27] == 1'b1) && (multiplier_mul_temp_14[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_14[13:0], 15'b000000000000000}));



  assign sum14_cast2 = {{5{product15[28]}}, product15};



  assign adder_add_cast_26 = {sum13[33], sum13};
  assign adder_add_cast_27 = {sum14_cast2[33], sum14_cast2};
  assign sum14_temp = adder_add_cast_26 + adder_add_cast_27;



  assign sum14 = ((sum14_temp[34] == 1'b0) && (sum14_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum14_temp[34] == 1'b1) && (sum14_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum14_temp[33:0])));



  assign coeff16 = 14'sb00000010100001;



  assign multiplier_mul_temp_15 = delay_pipeline_14 * coeff16;
  assign product16 = ((multiplier_mul_temp_15[27] == 1'b0) && (multiplier_mul_temp_15[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_15[27] == 1'b1) && (multiplier_mul_temp_15[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_15[13:0], 15'b000000000000000}));



  assign sum15_cast2 = {{5{product16[28]}}, product16};



  assign adder_add_cast_28 = {sum14[33], sum14};
  assign adder_add_cast_29 = {sum15_cast2[33], sum15_cast2};
  assign sum15_temp = adder_add_cast_28 + adder_add_cast_29;



  assign sum15 = ((sum15_temp[34] == 1'b0) && (sum15_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum15_temp[34] == 1'b1) && (sum15_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum15_temp[33:0])));



  assign coeff17 = 14'sb00000000111110;



  assign multiplier_mul_temp_16 = delay_pipeline_15 * coeff17;
  assign product17 = ((multiplier_mul_temp_16[27] == 1'b0) && (multiplier_mul_temp_16[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_16[27] == 1'b1) && (multiplier_mul_temp_16[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_16[13:0], 15'b000000000000000}));



  assign sum16_cast2 = {{5{product17[28]}}, product17};



  assign adder_add_cast_30 = {sum15[33], sum15};
  assign adder_add_cast_31 = {sum16_cast2[33], sum16_cast2};
  assign sum16_temp = adder_add_cast_30 + adder_add_cast_31;



  assign sum16 = ((sum16_temp[34] == 1'b0) && (sum16_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum16_temp[34] == 1'b1) && (sum16_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum16_temp[33:0])));



  assign coeff18 = 14'sb11111101110000;



  assign multiplier_mul_temp_17 = delay_pipeline_16 * coeff18;
  assign product18 = ((multiplier_mul_temp_17[27] == 1'b0) && (multiplier_mul_temp_17[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_17[27] == 1'b1) && (multiplier_mul_temp_17[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_17[13:0], 15'b000000000000000}));



  assign sum17_cast2 = {{5{product18[28]}}, product18};



  assign adder_add_cast_32 = {sum16[33], sum16};
  assign adder_add_cast_33 = {sum17_cast2[33], sum17_cast2};
  assign sum17_temp = adder_add_cast_32 + adder_add_cast_33;



  assign sum17 = ((sum17_temp[34] == 1'b0) && (sum17_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum17_temp[34] == 1'b1) && (sum17_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum17_temp[33:0])));



  assign coeff19 = 14'sb11111001010101;



  assign multiplier_mul_temp_18 = delay_pipeline_17 * coeff19;
  assign product19 = ((multiplier_mul_temp_18[27] == 1'b0) && (multiplier_mul_temp_18[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_18[27] == 1'b1) && (multiplier_mul_temp_18[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_18[13:0], 15'b000000000000000}));



  assign sum18_cast2 = {{5{product19[28]}}, product19};



  assign adder_add_cast_34 = {sum17[33], sum17};
  assign adder_add_cast_35 = {sum18_cast2[33], sum18_cast2};
  assign sum18_temp = adder_add_cast_34 + adder_add_cast_35;



  assign sum18 = ((sum18_temp[34] == 1'b0) && (sum18_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum18_temp[34] == 1'b1) && (sum18_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum18_temp[33:0])));



  assign coeff20 = 14'sb11110100100101;



  assign multiplier_mul_temp_19 = delay_pipeline_18 * coeff20;
  assign product20 = ((multiplier_mul_temp_19[27] == 1'b0) && (multiplier_mul_temp_19[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_19[27] == 1'b1) && (multiplier_mul_temp_19[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_19[13:0], 15'b000000000000000}));



  assign sum19_cast2 = {{5{product20[28]}}, product20};



  assign adder_add_cast_36 = {sum18[33], sum18};
  assign adder_add_cast_37 = {sum19_cast2[33], sum19_cast2};
  assign sum19_temp = adder_add_cast_36 + adder_add_cast_37;



  assign sum19 = ((sum19_temp[34] == 1'b0) && (sum19_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum19_temp[34] == 1'b1) && (sum19_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum19_temp[33:0])));



  assign coeff21 = 14'sb11110000101101;



  assign multiplier_mul_temp_20 = delay_pipeline_19 * coeff21;
  assign product21 = ((multiplier_mul_temp_20[27] == 1'b0) && (multiplier_mul_temp_20[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_20[27] == 1'b1) && (multiplier_mul_temp_20[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_20[13:0], 15'b000000000000000}));



  assign sum20_cast2 = {{5{product21[28]}}, product21};



  assign adder_add_cast_38 = {sum19[33], sum19};
  assign adder_add_cast_39 = {sum20_cast2[33], sum20_cast2};
  assign sum20_temp = adder_add_cast_38 + adder_add_cast_39;



  assign sum20 = ((sum20_temp[34] == 1'b0) && (sum20_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum20_temp[34] == 1'b1) && (sum20_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum20_temp[33:0])));



  assign coeff22 = 14'sb11101110110110;



  assign multiplier_mul_temp_21 = delay_pipeline_20 * coeff22;
  assign product22 = ((multiplier_mul_temp_21[27] == 1'b0) && (multiplier_mul_temp_21[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_21[27] == 1'b1) && (multiplier_mul_temp_21[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_21[13:0], 15'b000000000000000}));



  assign sum21_cast2 = {{5{product22[28]}}, product22};



  assign adder_add_cast_40 = {sum20[33], sum20};
  assign adder_add_cast_41 = {sum21_cast2[33], sum21_cast2};
  assign sum21_temp = adder_add_cast_40 + adder_add_cast_41;



  assign sum21 = ((sum21_temp[34] == 1'b0) && (sum21_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum21_temp[34] == 1'b1) && (sum21_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum21_temp[33:0])));



  assign coeff23 = 14'sb11101111101101;



  assign multiplier_mul_temp_22 = delay_pipeline_21 * coeff23;
  assign product23 = ((multiplier_mul_temp_22[27] == 1'b0) && (multiplier_mul_temp_22[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_22[27] == 1'b1) && (multiplier_mul_temp_22[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_22[13:0], 15'b000000000000000}));



  assign sum22_cast2 = {{5{product23[28]}}, product23};



  assign adder_add_cast_42 = {sum21[33], sum21};
  assign adder_add_cast_43 = {sum22_cast2[33], sum22_cast2};
  assign sum22_temp = adder_add_cast_42 + adder_add_cast_43;



  assign sum22 = ((sum22_temp[34] == 1'b0) && (sum22_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum22_temp[34] == 1'b1) && (sum22_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum22_temp[33:0])));



  assign coeff24 = 14'sb11110011011101;



  assign multiplier_mul_temp_23 = delay_pipeline_22 * coeff24;
  assign product24 = ((multiplier_mul_temp_23[27] == 1'b0) && (multiplier_mul_temp_23[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_23[27] == 1'b1) && (multiplier_mul_temp_23[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_23[13:0], 15'b000000000000000}));



  assign sum23_cast2 = {{5{product24[28]}}, product24};



  assign adder_add_cast_44 = {sum22[33], sum22};
  assign adder_add_cast_45 = {sum23_cast2[33], sum23_cast2};
  assign sum23_temp = adder_add_cast_44 + adder_add_cast_45;



  assign sum23 = ((sum23_temp[34] == 1'b0) && (sum23_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum23_temp[34] == 1'b1) && (sum23_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum23_temp[33:0])));



  assign coeff25 = 14'sb11111001100010;



  assign multiplier_mul_temp_24 = delay_pipeline_23 * coeff25;
  assign product25 = ((multiplier_mul_temp_24[27] == 1'b0) && (multiplier_mul_temp_24[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_24[27] == 1'b1) && (multiplier_mul_temp_24[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_24[13:0], 15'b000000000000000}));



  assign sum24_cast2 = {{5{product25[28]}}, product25};



  assign adder_add_cast_46 = {sum23[33], sum23};
  assign adder_add_cast_47 = {sum24_cast2[33], sum24_cast2};
  assign sum24_temp = adder_add_cast_46 + adder_add_cast_47;



  assign sum24 = ((sum24_temp[34] == 1'b0) && (sum24_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum24_temp[34] == 1'b1) && (sum24_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum24_temp[33:0])));



  assign coeff26 = 14'sb00000000110101;



  assign multiplier_mul_temp_25 = delay_pipeline_24 * coeff26;
  assign product26 = ((multiplier_mul_temp_25[27] == 1'b0) && (multiplier_mul_temp_25[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_25[27] == 1'b1) && (multiplier_mul_temp_25[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_25[13:0], 15'b000000000000000}));



  assign sum25_cast2 = {{5{product26[28]}}, product26};



  assign adder_add_cast_48 = {sum24[33], sum24};
  assign adder_add_cast_49 = {sum25_cast2[33], sum25_cast2};
  assign sum25_temp = adder_add_cast_48 + adder_add_cast_49;



  assign sum25 = ((sum25_temp[34] == 1'b0) && (sum25_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum25_temp[34] == 1'b1) && (sum25_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum25_temp[33:0])));



  assign coeff27 = 14'sb00000111110010;



  assign multiplier_mul_temp_26 = delay_pipeline_25 * coeff27;
  assign product27 = ((multiplier_mul_temp_26[27] == 1'b0) && (multiplier_mul_temp_26[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_26[27] == 1'b1) && (multiplier_mul_temp_26[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_26[13:0], 15'b000000000000000}));



  assign sum26_cast2 = {{5{product27[28]}}, product27};



  assign adder_add_cast_50 = {sum25[33], sum25};
  assign adder_add_cast_51 = {sum26_cast2[33], sum26_cast2};
  assign sum26_temp = adder_add_cast_50 + adder_add_cast_51;



  assign sum26 = ((sum26_temp[34] == 1'b0) && (sum26_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum26_temp[34] == 1'b1) && (sum26_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum26_temp[33:0])));



  assign coeff28 = 14'sb00001100111110;



  assign multiplier_mul_temp_27 = delay_pipeline_26 * coeff28;
  assign product28 = ((multiplier_mul_temp_27[27] == 1'b0) && (multiplier_mul_temp_27[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_27[27] == 1'b1) && (multiplier_mul_temp_27[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_27[13:0], 15'b000000000000000}));



  assign sum27_cast2 = {{5{product28[28]}}, product28};



  assign adder_add_cast_52 = {sum26[33], sum26};
  assign adder_add_cast_53 = {sum27_cast2[33], sum27_cast2};
  assign sum27_temp = adder_add_cast_52 + adder_add_cast_53;



  assign sum27 = ((sum27_temp[34] == 1'b0) && (sum27_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum27_temp[34] == 1'b1) && (sum27_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum27_temp[33:0])));



  assign coeff29 = 14'sb00001111011000;



  assign multiplier_mul_temp_28 = delay_pipeline_27 * coeff29;
  assign product29 = ((multiplier_mul_temp_28[27] == 1'b0) && (multiplier_mul_temp_28[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_28[27] == 1'b1) && (multiplier_mul_temp_28[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_28[13:0], 15'b000000000000000}));



  assign sum28_cast2 = {{5{product29[28]}}, product29};



  assign adder_add_cast_54 = {sum27[33], sum27};
  assign adder_add_cast_55 = {sum28_cast2[33], sum28_cast2};
  assign sum28_temp = adder_add_cast_54 + adder_add_cast_55;



  assign sum28 = ((sum28_temp[34] == 1'b0) && (sum28_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum28_temp[34] == 1'b1) && (sum28_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum28_temp[33:0])));



  assign coeff30 = 14'sb00001110100111;



  assign multiplier_mul_temp_29 = delay_pipeline_28 * coeff30;
  assign product30 = ((multiplier_mul_temp_29[27] == 1'b0) && (multiplier_mul_temp_29[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_29[27] == 1'b1) && (multiplier_mul_temp_29[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_29[13:0], 15'b000000000000000}));



  assign sum29_cast2 = {{5{product30[28]}}, product30};



  assign adder_add_cast_56 = {sum28[33], sum28};
  assign adder_add_cast_57 = {sum29_cast2[33], sum29_cast2};
  assign sum29_temp = adder_add_cast_56 + adder_add_cast_57;



  assign sum29 = ((sum29_temp[34] == 1'b0) && (sum29_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum29_temp[34] == 1'b1) && (sum29_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum29_temp[33:0])));



  assign coeff31 = 14'sb00001011001100;



  assign multiplier_mul_temp_30 = delay_pipeline_29 * coeff31;
  assign product31 = ((multiplier_mul_temp_30[27] == 1'b0) && (multiplier_mul_temp_30[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_30[27] == 1'b1) && (multiplier_mul_temp_30[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_30[13:0], 15'b000000000000000}));



  assign sum30_cast2 = {{5{product31[28]}}, product31};



  assign adder_add_cast_58 = {sum29[33], sum29};
  assign adder_add_cast_59 = {sum30_cast2[33], sum30_cast2};
  assign sum30_temp = adder_add_cast_58 + adder_add_cast_59;



  assign sum30 = ((sum30_temp[34] == 1'b0) && (sum30_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum30_temp[34] == 1'b1) && (sum30_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum30_temp[33:0])));



  assign coeff32 = 14'sb00000110011101;



  assign multiplier_mul_temp_31 = delay_pipeline_30 * coeff32;
  assign product32 = ((multiplier_mul_temp_31[27] == 1'b0) && (multiplier_mul_temp_31[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_31[27] == 1'b1) && (multiplier_mul_temp_31[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_31[13:0], 15'b000000000000000}));



  assign sum31_cast2 = {{5{product32[28]}}, product32};



  assign adder_add_cast_60 = {sum30[33], sum30};
  assign adder_add_cast_61 = {sum31_cast2[33], sum31_cast2};
  assign sum31_temp = adder_add_cast_60 + adder_add_cast_61;



  assign sum31 = ((sum31_temp[34] == 1'b0) && (sum31_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum31_temp[34] == 1'b1) && (sum31_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum31_temp[33:0])));



  assign coeff33 = 14'sb00000010000010;



  assign multiplier_mul_temp_32 = delay_pipeline_31 * coeff33;
  assign product33 = ((multiplier_mul_temp_32[27] == 1'b0) && (multiplier_mul_temp_32[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_32[27] == 1'b1) && (multiplier_mul_temp_32[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_32[13:0], 15'b000000000000000}));



  assign sum32_cast2 = {{5{product33[28]}}, product33};



  assign adder_add_cast_62 = {sum31[33], sum31};
  assign adder_add_cast_63 = {sum32_cast2[33], sum32_cast2};
  assign sum32_temp = adder_add_cast_62 + adder_add_cast_63;



  assign sum32 = ((sum32_temp[34] == 1'b0) && (sum32_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum32_temp[34] == 1'b1) && (sum32_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum32_temp[33:0])));



  assign coeff34 = 14'sb11111111101100;



  assign multiplier_mul_temp_33 = delay_pipeline_32 * coeff34;
  assign product34 = ((multiplier_mul_temp_33[27] == 1'b0) && (multiplier_mul_temp_33[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_33[27] == 1'b1) && (multiplier_mul_temp_33[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_33[13:0], 15'b000000000000000}));



  assign sum33_cast2 = {{5{product34[28]}}, product34};



  assign adder_add_cast_64 = {sum32[33], sum32};
  assign adder_add_cast_65 = {sum33_cast2[33], sum33_cast2};
  assign sum33_temp = adder_add_cast_64 + adder_add_cast_65;



  assign sum33 = ((sum33_temp[34] == 1'b0) && (sum33_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum33_temp[34] == 1'b1) && (sum33_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum33_temp[33:0])));



  assign coeff35 = 14'sb00000000100011;



  assign multiplier_mul_temp_34 = delay_pipeline_33 * coeff35;
  assign product35 = ((multiplier_mul_temp_34[27] == 1'b0) && (multiplier_mul_temp_34[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_34[27] == 1'b1) && (multiplier_mul_temp_34[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_34[13:0], 15'b000000000000000}));



  assign sum34_cast2 = {{5{product35[28]}}, product35};



  assign adder_add_cast_66 = {sum33[33], sum33};
  assign adder_add_cast_67 = {sum34_cast2[33], sum34_cast2};
  assign sum34_temp = adder_add_cast_66 + adder_add_cast_67;



  assign sum34 = ((sum34_temp[34] == 1'b0) && (sum34_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum34_temp[34] == 1'b1) && (sum34_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum34_temp[33:0])));



  assign coeff36 = 14'sb00000100110001;



  assign multiplier_mul_temp_35 = delay_pipeline_34 * coeff36;
  assign product36 = ((multiplier_mul_temp_35[27] == 1'b0) && (multiplier_mul_temp_35[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_35[27] == 1'b1) && (multiplier_mul_temp_35[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_35[13:0], 15'b000000000000000}));



  assign sum35_cast2 = {{5{product36[28]}}, product36};



  assign adder_add_cast_68 = {sum34[33], sum34};
  assign adder_add_cast_69 = {sum35_cast2[33], sum35_cast2};
  assign sum35_temp = adder_add_cast_68 + adder_add_cast_69;



  assign sum35 = ((sum35_temp[34] == 1'b0) && (sum35_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum35_temp[34] == 1'b1) && (sum35_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum35_temp[33:0])));



  assign coeff37 = 14'sb00001011100101;



  assign multiplier_mul_temp_36 = delay_pipeline_35 * coeff37;
  assign product37 = ((multiplier_mul_temp_36[27] == 1'b0) && (multiplier_mul_temp_36[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_36[27] == 1'b1) && (multiplier_mul_temp_36[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_36[13:0], 15'b000000000000000}));



  assign sum36_cast2 = {{5{product37[28]}}, product37};



  assign adder_add_cast_70 = {sum35[33], sum35};
  assign adder_add_cast_71 = {sum36_cast2[33], sum36_cast2};
  assign sum36_temp = adder_add_cast_70 + adder_add_cast_71;



  assign sum36 = ((sum36_temp[34] == 1'b0) && (sum36_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum36_temp[34] == 1'b1) && (sum36_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum36_temp[33:0])));



  assign coeff38 = 14'sb00010010111101;



  assign multiplier_mul_temp_37 = delay_pipeline_36 * coeff38;
  assign product38 = ((multiplier_mul_temp_37[27] == 1'b0) && (multiplier_mul_temp_37[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_37[27] == 1'b1) && (multiplier_mul_temp_37[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_37[13:0], 15'b000000000000000}));



  assign sum37_cast2 = {{5{product38[28]}}, product38};



  assign adder_add_cast_72 = {sum36[33], sum36};
  assign adder_add_cast_73 = {sum37_cast2[33], sum37_cast2};
  assign sum37_temp = adder_add_cast_72 + adder_add_cast_73;



  assign sum37 = ((sum37_temp[34] == 1'b0) && (sum37_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum37_temp[34] == 1'b1) && (sum37_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum37_temp[33:0])));



  assign coeff39 = 14'sb00011000011111;



  assign multiplier_mul_temp_38 = delay_pipeline_37 * coeff39;
  assign product39 = ((multiplier_mul_temp_38[27] == 1'b0) && (multiplier_mul_temp_38[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_38[27] == 1'b1) && (multiplier_mul_temp_38[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_38[13:0], 15'b000000000000000}));



  assign sum38_cast2 = {{5{product39[28]}}, product39};



  assign adder_add_cast_74 = {sum37[33], sum37};
  assign adder_add_cast_75 = {sum38_cast2[33], sum38_cast2};
  assign sum38_temp = adder_add_cast_74 + adder_add_cast_75;



  assign sum38 = ((sum38_temp[34] == 1'b0) && (sum38_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum38_temp[34] == 1'b1) && (sum38_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum38_temp[33:0])));



  assign coeff40 = 14'sb00011001100011;



  assign multiplier_mul_temp_39 = delay_pipeline_38 * coeff40;
  assign product40 = ((multiplier_mul_temp_39[27] == 1'b0) && (multiplier_mul_temp_39[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_39[27] == 1'b1) && (multiplier_mul_temp_39[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_39[13:0], 15'b000000000000000}));



  assign sum39_cast2 = {{5{product40[28]}}, product40};



  assign adder_add_cast_76 = {sum38[33], sum38};
  assign adder_add_cast_77 = {sum39_cast2[33], sum39_cast2};
  assign sum39_temp = adder_add_cast_76 + adder_add_cast_77;



  assign sum39 = ((sum39_temp[34] == 1'b0) && (sum39_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum39_temp[34] == 1'b1) && (sum39_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum39_temp[33:0])));



  assign coeff41 = 14'sb00010100010010;



  assign multiplier_mul_temp_40 = delay_pipeline_39 * coeff41;
  assign product41 = ((multiplier_mul_temp_40[27] == 1'b0) && (multiplier_mul_temp_40[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_40[27] == 1'b1) && (multiplier_mul_temp_40[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_40[13:0], 15'b000000000000000}));



  assign sum40_cast2 = {{5{product41[28]}}, product41};



  assign adder_add_cast_78 = {sum39[33], sum39};
  assign adder_add_cast_79 = {sum40_cast2[33], sum40_cast2};
  assign sum40_temp = adder_add_cast_78 + adder_add_cast_79;



  assign sum40 = ((sum40_temp[34] == 1'b0) && (sum40_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum40_temp[34] == 1'b1) && (sum40_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum40_temp[33:0])));



  assign coeff42 = 14'sb00001000000101;



  assign multiplier_mul_temp_41 = delay_pipeline_40 * coeff42;
  assign product42 = ((multiplier_mul_temp_41[27] == 1'b0) && (multiplier_mul_temp_41[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_41[27] == 1'b1) && (multiplier_mul_temp_41[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_41[13:0], 15'b000000000000000}));



  assign sum41_cast2 = {{5{product42[28]}}, product42};



  assign adder_add_cast_80 = {sum40[33], sum40};
  assign adder_add_cast_81 = {sum41_cast2[33], sum41_cast2};
  assign sum41_temp = adder_add_cast_80 + adder_add_cast_81;



  assign sum41 = ((sum41_temp[34] == 1'b0) && (sum41_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum41_temp[34] == 1'b1) && (sum41_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum41_temp[33:0])));



  assign coeff43 = 14'sb11110101111001;



  assign multiplier_mul_temp_42 = delay_pipeline_41 * coeff43;
  assign product43 = ((multiplier_mul_temp_42[27] == 1'b0) && (multiplier_mul_temp_42[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_42[27] == 1'b1) && (multiplier_mul_temp_42[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_42[13:0], 15'b000000000000000}));



  assign sum42_cast2 = {{5{product43[28]}}, product43};



  assign adder_add_cast_82 = {sum41[33], sum41};
  assign adder_add_cast_83 = {sum42_cast2[33], sum42_cast2};
  assign sum42_temp = adder_add_cast_82 + adder_add_cast_83;



  assign sum42 = ((sum42_temp[34] == 1'b0) && (sum42_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum42_temp[34] == 1'b1) && (sum42_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum42_temp[33:0])));



  assign coeff44 = 14'sb11100000011011;



  assign multiplier_mul_temp_43 = delay_pipeline_42 * coeff44;
  assign product44 = ((multiplier_mul_temp_43[27] == 1'b0) && (multiplier_mul_temp_43[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_43[27] == 1'b1) && (multiplier_mul_temp_43[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_43[13:0], 15'b000000000000000}));



  assign sum43_cast2 = {{5{product44[28]}}, product44};



  assign adder_add_cast_84 = {sum42[33], sum42};
  assign adder_add_cast_85 = {sum43_cast2[33], sum43_cast2};
  assign sum43_temp = adder_add_cast_84 + adder_add_cast_85;



  assign sum43 = ((sum43_temp[34] == 1'b0) && (sum43_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum43_temp[34] == 1'b1) && (sum43_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum43_temp[33:0])));



  assign coeff45 = 14'sb11001011011110;



  assign multiplier_mul_temp_44 = delay_pipeline_43 * coeff45;
  assign product45 = ((multiplier_mul_temp_44[27] == 1'b0) && (multiplier_mul_temp_44[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_44[27] == 1'b1) && (multiplier_mul_temp_44[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_44[13:0], 15'b000000000000000}));



  assign sum44_cast2 = {{5{product45[28]}}, product45};



  assign adder_add_cast_86 = {sum43[33], sum43};
  assign adder_add_cast_87 = {sum44_cast2[33], sum44_cast2};
  assign sum44_temp = adder_add_cast_86 + adder_add_cast_87;



  assign sum44 = ((sum44_temp[34] == 1'b0) && (sum44_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum44_temp[34] == 1'b1) && (sum44_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum44_temp[33:0])));



  assign coeff46 = 14'sb10111011011011;



  assign multiplier_mul_temp_45 = delay_pipeline_44 * coeff46;
  assign product46 = ((multiplier_mul_temp_45[27] == 1'b0) && (multiplier_mul_temp_45[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_45[27] == 1'b1) && (multiplier_mul_temp_45[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_45[13:0], 15'b000000000000000}));



  assign sum45_cast2 = {{5{product46[28]}}, product46};



  assign adder_add_cast_88 = {sum44[33], sum44};
  assign adder_add_cast_89 = {sum45_cast2[33], sum45_cast2};
  assign sum45_temp = adder_add_cast_88 + adder_add_cast_89;



  assign sum45 = ((sum45_temp[34] == 1'b0) && (sum45_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum45_temp[34] == 1'b1) && (sum45_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum45_temp[33:0])));



  assign coeff47 = 14'sb10110100001110;



  assign multiplier_mul_temp_46 = delay_pipeline_45 * coeff47;
  assign product47 = ((multiplier_mul_temp_46[27] == 1'b0) && (multiplier_mul_temp_46[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_46[27] == 1'b1) && (multiplier_mul_temp_46[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_46[13:0], 15'b000000000000000}));



  assign sum46_cast2 = {{5{product47[28]}}, product47};



  assign adder_add_cast_90 = {sum45[33], sum45};
  assign adder_add_cast_91 = {sum46_cast2[33], sum46_cast2};
  assign sum46_temp = adder_add_cast_90 + adder_add_cast_91;



  assign sum46 = ((sum46_temp[34] == 1'b0) && (sum46_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum46_temp[34] == 1'b1) && (sum46_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum46_temp[33:0])));



  assign coeff48 = 14'sb10111000100010;



  assign multiplier_mul_temp_47 = delay_pipeline_46 * coeff48;
  assign product48 = ((multiplier_mul_temp_47[27] == 1'b0) && (multiplier_mul_temp_47[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_47[27] == 1'b1) && (multiplier_mul_temp_47[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_47[13:0], 15'b000000000000000}));



  assign sum47_cast2 = {{5{product48[28]}}, product48};



  assign adder_add_cast_92 = {sum46[33], sum46};
  assign adder_add_cast_93 = {sum47_cast2[33], sum47_cast2};
  assign sum47_temp = adder_add_cast_92 + adder_add_cast_93;



  assign sum47 = ((sum47_temp[34] == 1'b0) && (sum47_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum47_temp[34] == 1'b1) && (sum47_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum47_temp[33:0])));



  assign coeff49 = 14'sb11001000111101;



  assign multiplier_mul_temp_48 = delay_pipeline_47 * coeff49;
  assign product49 = ((multiplier_mul_temp_48[27] == 1'b0) && (multiplier_mul_temp_48[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_48[27] == 1'b1) && (multiplier_mul_temp_48[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_48[13:0], 15'b000000000000000}));



  assign sum48_cast2 = {{5{product49[28]}}, product49};



  assign adder_add_cast_94 = {sum47[33], sum47};
  assign adder_add_cast_95 = {sum48_cast2[33], sum48_cast2};
  assign sum48_temp = adder_add_cast_94 + adder_add_cast_95;



  assign sum48 = ((sum48_temp[34] == 1'b0) && (sum48_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum48_temp[34] == 1'b1) && (sum48_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum48_temp[33:0])));



  assign coeff50 = 14'sb11100011111000;



  assign multiplier_mul_temp_49 = delay_pipeline_48 * coeff50;
  assign product50 = ((multiplier_mul_temp_49[27] == 1'b0) && (multiplier_mul_temp_49[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_49[27] == 1'b1) && (multiplier_mul_temp_49[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_49[13:0], 15'b000000000000000}));



  assign sum49_cast2 = {{5{product50[28]}}, product50};



  assign adder_add_cast_96 = {sum48[33], sum48};
  assign adder_add_cast_97 = {sum49_cast2[33], sum49_cast2};
  assign sum49_temp = adder_add_cast_96 + adder_add_cast_97;



  assign sum49 = ((sum49_temp[34] == 1'b0) && (sum49_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum49_temp[34] == 1'b1) && (sum49_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum49_temp[33:0])));



  assign coeff51 = 14'sb00000101011100;



  assign multiplier_mul_temp_50 = delay_pipeline_49 * coeff51;
  assign product51 = ((multiplier_mul_temp_50[27] == 1'b0) && (multiplier_mul_temp_50[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_50[27] == 1'b1) && (multiplier_mul_temp_50[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_50[13:0], 15'b000000000000000}));



  assign sum50_cast2 = {{5{product51[28]}}, product51};



  assign adder_add_cast_98 = {sum49[33], sum49};
  assign adder_add_cast_99 = {sum50_cast2[33], sum50_cast2};
  assign sum50_temp = adder_add_cast_98 + adder_add_cast_99;



  assign sum50 = ((sum50_temp[34] == 1'b0) && (sum50_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum50_temp[34] == 1'b1) && (sum50_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum50_temp[33:0])));



  assign coeff52 = 14'sb00101000011000;



  assign multiplier_mul_temp_51 = delay_pipeline_50 * coeff52;
  assign product52 = ((multiplier_mul_temp_51[27] == 1'b0) && (multiplier_mul_temp_51[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_51[27] == 1'b1) && (multiplier_mul_temp_51[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_51[13:0], 15'b000000000000000}));



  assign sum51_cast2 = {{5{product52[28]}}, product52};



  assign adder_add_cast_100 = {sum50[33], sum50};
  assign adder_add_cast_101 = {sum51_cast2[33], sum51_cast2};
  assign sum51_temp = adder_add_cast_100 + adder_add_cast_101;



  assign sum51 = ((sum51_temp[34] == 1'b0) && (sum51_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum51_temp[34] == 1'b1) && (sum51_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum51_temp[33:0])));



  assign coeff53 = 14'sb01000110110101;



  assign multiplier_mul_temp_52 = delay_pipeline_51 * coeff53;
  assign product53 = ((multiplier_mul_temp_52[27] == 1'b0) && (multiplier_mul_temp_52[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_52[27] == 1'b1) && (multiplier_mul_temp_52[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_52[13:0], 15'b000000000000000}));



  assign sum52_cast2 = {{5{product53[28]}}, product53};



  assign adder_add_cast_102 = {sum51[33], sum51};
  assign adder_add_cast_103 = {sum52_cast2[33], sum52_cast2};
  assign sum52_temp = adder_add_cast_102 + adder_add_cast_103;



  assign sum52 = ((sum52_temp[34] == 1'b0) && (sum52_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum52_temp[34] == 1'b1) && (sum52_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum52_temp[33:0])));



  assign coeff54 = 14'sb01011011100100;



  assign multiplier_mul_temp_53 = delay_pipeline_52 * coeff54;
  assign product54 = ((multiplier_mul_temp_53[27] == 1'b0) && (multiplier_mul_temp_53[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_53[27] == 1'b1) && (multiplier_mul_temp_53[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_53[13:0], 15'b000000000000000}));



  assign sum53_cast2 = {{5{product54[28]}}, product54};



  assign adder_add_cast_104 = {sum52[33], sum52};
  assign adder_add_cast_105 = {sum53_cast2[33], sum53_cast2};
  assign sum53_temp = adder_add_cast_104 + adder_add_cast_105;



  assign sum53 = ((sum53_temp[34] == 1'b0) && (sum53_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum53_temp[34] == 1'b1) && (sum53_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum53_temp[33:0])));



  assign coeff55 = 14'sb01100010111001;



  assign multiplier_mul_temp_54 = delay_pipeline_53 * coeff55;
  assign product55 = ((multiplier_mul_temp_54[27] == 1'b0) && (multiplier_mul_temp_54[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_54[27] == 1'b1) && (multiplier_mul_temp_54[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_54[13:0], 15'b000000000000000}));



  assign sum54_cast2 = {{5{product55[28]}}, product55};



  assign adder_add_cast_106 = {sum53[33], sum53};
  assign adder_add_cast_107 = {sum54_cast2[33], sum54_cast2};
  assign sum54_temp = adder_add_cast_106 + adder_add_cast_107;



  assign sum54 = ((sum54_temp[34] == 1'b0) && (sum54_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum54_temp[34] == 1'b1) && (sum54_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum54_temp[33:0])));



  assign coeff56 = 14'sb01011011100100;



  assign multiplier_mul_temp_55 = delay_pipeline_54 * coeff56;
  assign product56 = ((multiplier_mul_temp_55[27] == 1'b0) && (multiplier_mul_temp_55[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_55[27] == 1'b1) && (multiplier_mul_temp_55[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_55[13:0], 15'b000000000000000}));



  assign sum55_cast2 = {{5{product56[28]}}, product56};



  assign adder_add_cast_108 = {sum54[33], sum54};
  assign adder_add_cast_109 = {sum55_cast2[33], sum55_cast2};
  assign sum55_temp = adder_add_cast_108 + adder_add_cast_109;



  assign sum55 = ((sum55_temp[34] == 1'b0) && (sum55_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum55_temp[34] == 1'b1) && (sum55_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum55_temp[33:0])));



  assign coeff57 = 14'sb01000110110101;



  assign multiplier_mul_temp_56 = delay_pipeline_55 * coeff57;
  assign product57 = ((multiplier_mul_temp_56[27] == 1'b0) && (multiplier_mul_temp_56[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_56[27] == 1'b1) && (multiplier_mul_temp_56[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_56[13:0], 15'b000000000000000}));



  assign sum56_cast2 = {{5{product57[28]}}, product57};



  assign adder_add_cast_110 = {sum55[33], sum55};
  assign adder_add_cast_111 = {sum56_cast2[33], sum56_cast2};
  assign sum56_temp = adder_add_cast_110 + adder_add_cast_111;



  assign sum56 = ((sum56_temp[34] == 1'b0) && (sum56_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum56_temp[34] == 1'b1) && (sum56_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum56_temp[33:0])));



  assign coeff58 = 14'sb00101000011000;



  assign multiplier_mul_temp_57 = delay_pipeline_56 * coeff58;
  assign product58 = ((multiplier_mul_temp_57[27] == 1'b0) && (multiplier_mul_temp_57[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_57[27] == 1'b1) && (multiplier_mul_temp_57[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_57[13:0], 15'b000000000000000}));



  assign sum57_cast2 = {{5{product58[28]}}, product58};



  assign adder_add_cast_112 = {sum56[33], sum56};
  assign adder_add_cast_113 = {sum57_cast2[33], sum57_cast2};
  assign sum57_temp = adder_add_cast_112 + adder_add_cast_113;



  assign sum57 = ((sum57_temp[34] == 1'b0) && (sum57_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum57_temp[34] == 1'b1) && (sum57_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum57_temp[33:0])));



  assign coeff59 = 14'sb00000101011100;



  assign multiplier_mul_temp_58 = delay_pipeline_57 * coeff59;
  assign product59 = ((multiplier_mul_temp_58[27] == 1'b0) && (multiplier_mul_temp_58[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_58[27] == 1'b1) && (multiplier_mul_temp_58[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_58[13:0], 15'b000000000000000}));



  assign sum58_cast2 = {{5{product59[28]}}, product59};



  assign adder_add_cast_114 = {sum57[33], sum57};
  assign adder_add_cast_115 = {sum58_cast2[33], sum58_cast2};
  assign sum58_temp = adder_add_cast_114 + adder_add_cast_115;



  assign sum58 = ((sum58_temp[34] == 1'b0) && (sum58_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum58_temp[34] == 1'b1) && (sum58_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum58_temp[33:0])));



  assign coeff60 = 14'sb11100011111000;



  assign multiplier_mul_temp_59 = delay_pipeline_58 * coeff60;
  assign product60 = ((multiplier_mul_temp_59[27] == 1'b0) && (multiplier_mul_temp_59[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_59[27] == 1'b1) && (multiplier_mul_temp_59[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_59[13:0], 15'b000000000000000}));



  assign sum59_cast2 = {{5{product60[28]}}, product60};



  assign adder_add_cast_116 = {sum58[33], sum58};
  assign adder_add_cast_117 = {sum59_cast2[33], sum59_cast2};
  assign sum59_temp = adder_add_cast_116 + adder_add_cast_117;



  assign sum59 = ((sum59_temp[34] == 1'b0) && (sum59_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum59_temp[34] == 1'b1) && (sum59_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum59_temp[33:0])));



  assign coeff61 = 14'sb11001000111101;



  assign multiplier_mul_temp_60 = delay_pipeline_59 * coeff61;
  assign product61 = ((multiplier_mul_temp_60[27] == 1'b0) && (multiplier_mul_temp_60[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_60[27] == 1'b1) && (multiplier_mul_temp_60[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_60[13:0], 15'b000000000000000}));



  assign sum60_cast2 = {{5{product61[28]}}, product61};



  assign adder_add_cast_118 = {sum59[33], sum59};
  assign adder_add_cast_119 = {sum60_cast2[33], sum60_cast2};
  assign sum60_temp = adder_add_cast_118 + adder_add_cast_119;



  assign sum60 = ((sum60_temp[34] == 1'b0) && (sum60_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum60_temp[34] == 1'b1) && (sum60_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum60_temp[33:0])));



  assign coeff62 = 14'sb10111000100010;



  assign multiplier_mul_temp_61 = delay_pipeline_60 * coeff62;
  assign product62 = ((multiplier_mul_temp_61[27] == 1'b0) && (multiplier_mul_temp_61[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_61[27] == 1'b1) && (multiplier_mul_temp_61[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_61[13:0], 15'b000000000000000}));



  assign sum61_cast2 = {{5{product62[28]}}, product62};



  assign adder_add_cast_120 = {sum60[33], sum60};
  assign adder_add_cast_121 = {sum61_cast2[33], sum61_cast2};
  assign sum61_temp = adder_add_cast_120 + adder_add_cast_121;



  assign sum61 = ((sum61_temp[34] == 1'b0) && (sum61_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum61_temp[34] == 1'b1) && (sum61_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum61_temp[33:0])));



  assign coeff63 = 14'sb10110100001110;



  assign multiplier_mul_temp_62 = delay_pipeline_61 * coeff63;
  assign product63 = ((multiplier_mul_temp_62[27] == 1'b0) && (multiplier_mul_temp_62[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_62[27] == 1'b1) && (multiplier_mul_temp_62[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_62[13:0], 15'b000000000000000}));



  assign sum62_cast2 = {{5{product63[28]}}, product63};



  assign adder_add_cast_122 = {sum61[33], sum61};
  assign adder_add_cast_123 = {sum62_cast2[33], sum62_cast2};
  assign sum62_temp = adder_add_cast_122 + adder_add_cast_123;



  assign sum62 = ((sum62_temp[34] == 1'b0) && (sum62_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum62_temp[34] == 1'b1) && (sum62_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum62_temp[33:0])));



  assign coeff64 = 14'sb10111011011011;



  assign multiplier_mul_temp_63 = delay_pipeline_62 * coeff64;
  assign product64 = ((multiplier_mul_temp_63[27] == 1'b0) && (multiplier_mul_temp_63[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_63[27] == 1'b1) && (multiplier_mul_temp_63[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_63[13:0], 15'b000000000000000}));



  assign sum63_cast2 = {{5{product64[28]}}, product64};



  assign adder_add_cast_124 = {sum62[33], sum62};
  assign adder_add_cast_125 = {sum63_cast2[33], sum63_cast2};
  assign sum63_temp = adder_add_cast_124 + adder_add_cast_125;



  assign sum63 = ((sum63_temp[34] == 1'b0) && (sum63_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum63_temp[34] == 1'b1) && (sum63_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum63_temp[33:0])));



  assign coeff65 = 14'sb11001011011110;



  assign multiplier_mul_temp_64 = delay_pipeline_63 * coeff65;
  assign product65 = ((multiplier_mul_temp_64[27] == 1'b0) && (multiplier_mul_temp_64[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_64[27] == 1'b1) && (multiplier_mul_temp_64[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_64[13:0], 15'b000000000000000}));



  assign sum64_cast2 = {{5{product65[28]}}, product65};



  assign adder_add_cast_126 = {sum63[33], sum63};
  assign adder_add_cast_127 = {sum64_cast2[33], sum64_cast2};
  assign sum64_temp = adder_add_cast_126 + adder_add_cast_127;



  assign sum64 = ((sum64_temp[34] == 1'b0) && (sum64_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum64_temp[34] == 1'b1) && (sum64_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum64_temp[33:0])));



  assign coeff66 = 14'sb11100000011011;



  assign multiplier_mul_temp_65 = delay_pipeline_64 * coeff66;
  assign product66 = ((multiplier_mul_temp_65[27] == 1'b0) && (multiplier_mul_temp_65[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_65[27] == 1'b1) && (multiplier_mul_temp_65[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_65[13:0], 15'b000000000000000}));



  assign sum65_cast2 = {{5{product66[28]}}, product66};



  assign adder_add_cast_128 = {sum64[33], sum64};
  assign adder_add_cast_129 = {sum65_cast2[33], sum65_cast2};
  assign sum65_temp = adder_add_cast_128 + adder_add_cast_129;



  assign sum65 = ((sum65_temp[34] == 1'b0) && (sum65_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum65_temp[34] == 1'b1) && (sum65_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum65_temp[33:0])));



  assign coeff67 = 14'sb11110101111001;



  assign multiplier_mul_temp_66 = delay_pipeline_65 * coeff67;
  assign product67 = ((multiplier_mul_temp_66[27] == 1'b0) && (multiplier_mul_temp_66[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_66[27] == 1'b1) && (multiplier_mul_temp_66[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_66[13:0], 15'b000000000000000}));



  assign sum66_cast2 = {{5{product67[28]}}, product67};



  assign adder_add_cast_130 = {sum65[33], sum65};
  assign adder_add_cast_131 = {sum66_cast2[33], sum66_cast2};
  assign sum66_temp = adder_add_cast_130 + adder_add_cast_131;



  assign sum66 = ((sum66_temp[34] == 1'b0) && (sum66_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum66_temp[34] == 1'b1) && (sum66_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum66_temp[33:0])));



  assign coeff68 = 14'sb00001000000101;



  assign multiplier_mul_temp_67 = delay_pipeline_66 * coeff68;
  assign product68 = ((multiplier_mul_temp_67[27] == 1'b0) && (multiplier_mul_temp_67[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_67[27] == 1'b1) && (multiplier_mul_temp_67[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_67[13:0], 15'b000000000000000}));



  assign sum67_cast2 = {{5{product68[28]}}, product68};



  assign adder_add_cast_132 = {sum66[33], sum66};
  assign adder_add_cast_133 = {sum67_cast2[33], sum67_cast2};
  assign sum67_temp = adder_add_cast_132 + adder_add_cast_133;



  assign sum67 = ((sum67_temp[34] == 1'b0) && (sum67_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum67_temp[34] == 1'b1) && (sum67_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum67_temp[33:0])));



  assign coeff69 = 14'sb00010100010010;



  assign multiplier_mul_temp_68 = delay_pipeline_67 * coeff69;
  assign product69 = ((multiplier_mul_temp_68[27] == 1'b0) && (multiplier_mul_temp_68[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_68[27] == 1'b1) && (multiplier_mul_temp_68[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_68[13:0], 15'b000000000000000}));



  assign sum68_cast2 = {{5{product69[28]}}, product69};



  assign adder_add_cast_134 = {sum67[33], sum67};
  assign adder_add_cast_135 = {sum68_cast2[33], sum68_cast2};
  assign sum68_temp = adder_add_cast_134 + adder_add_cast_135;



  assign sum68 = ((sum68_temp[34] == 1'b0) && (sum68_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum68_temp[34] == 1'b1) && (sum68_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum68_temp[33:0])));



  assign coeff70 = 14'sb00011001100011;



  assign multiplier_mul_temp_69 = delay_pipeline_68 * coeff70;
  assign product70 = ((multiplier_mul_temp_69[27] == 1'b0) && (multiplier_mul_temp_69[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_69[27] == 1'b1) && (multiplier_mul_temp_69[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_69[13:0], 15'b000000000000000}));



  assign sum69_cast2 = {{5{product70[28]}}, product70};



  assign adder_add_cast_136 = {sum68[33], sum68};
  assign adder_add_cast_137 = {sum69_cast2[33], sum69_cast2};
  assign sum69_temp = adder_add_cast_136 + adder_add_cast_137;



  assign sum69 = ((sum69_temp[34] == 1'b0) && (sum69_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum69_temp[34] == 1'b1) && (sum69_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum69_temp[33:0])));



  assign coeff71 = 14'sb00011000011111;



  assign multiplier_mul_temp_70 = delay_pipeline_69 * coeff71;
  assign product71 = ((multiplier_mul_temp_70[27] == 1'b0) && (multiplier_mul_temp_70[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_70[27] == 1'b1) && (multiplier_mul_temp_70[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_70[13:0], 15'b000000000000000}));



  assign sum70_cast2 = {{5{product71[28]}}, product71};



  assign adder_add_cast_138 = {sum69[33], sum69};
  assign adder_add_cast_139 = {sum70_cast2[33], sum70_cast2};
  assign sum70_temp = adder_add_cast_138 + adder_add_cast_139;



  assign sum70 = ((sum70_temp[34] == 1'b0) && (sum70_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum70_temp[34] == 1'b1) && (sum70_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum70_temp[33:0])));



  assign coeff72 = 14'sb00010010111101;



  assign multiplier_mul_temp_71 = delay_pipeline_70 * coeff72;
  assign product72 = ((multiplier_mul_temp_71[27] == 1'b0) && (multiplier_mul_temp_71[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_71[27] == 1'b1) && (multiplier_mul_temp_71[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_71[13:0], 15'b000000000000000}));



  assign sum71_cast2 = {{5{product72[28]}}, product72};



  assign adder_add_cast_140 = {sum70[33], sum70};
  assign adder_add_cast_141 = {sum71_cast2[33], sum71_cast2};
  assign sum71_temp = adder_add_cast_140 + adder_add_cast_141;



  assign sum71 = ((sum71_temp[34] == 1'b0) && (sum71_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum71_temp[34] == 1'b1) && (sum71_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum71_temp[33:0])));



  assign coeff73 = 14'sb00001011100101;



  assign multiplier_mul_temp_72 = delay_pipeline_71 * coeff73;
  assign product73 = ((multiplier_mul_temp_72[27] == 1'b0) && (multiplier_mul_temp_72[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_72[27] == 1'b1) && (multiplier_mul_temp_72[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_72[13:0], 15'b000000000000000}));



  assign sum72_cast2 = {{5{product73[28]}}, product73};



  assign adder_add_cast_142 = {sum71[33], sum71};
  assign adder_add_cast_143 = {sum72_cast2[33], sum72_cast2};
  assign sum72_temp = adder_add_cast_142 + adder_add_cast_143;



  assign sum72 = ((sum72_temp[34] == 1'b0) && (sum72_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum72_temp[34] == 1'b1) && (sum72_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum72_temp[33:0])));



  assign coeff74 = 14'sb00000100110001;



  assign multiplier_mul_temp_73 = delay_pipeline_72 * coeff74;
  assign product74 = ((multiplier_mul_temp_73[27] == 1'b0) && (multiplier_mul_temp_73[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_73[27] == 1'b1) && (multiplier_mul_temp_73[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_73[13:0], 15'b000000000000000}));



  assign sum73_cast2 = {{5{product74[28]}}, product74};



  assign adder_add_cast_144 = {sum72[33], sum72};
  assign adder_add_cast_145 = {sum73_cast2[33], sum73_cast2};
  assign sum73_temp = adder_add_cast_144 + adder_add_cast_145;



  assign sum73 = ((sum73_temp[34] == 1'b0) && (sum73_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum73_temp[34] == 1'b1) && (sum73_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum73_temp[33:0])));



  assign coeff75 = 14'sb00000000100011;



  assign multiplier_mul_temp_74 = delay_pipeline_73 * coeff75;
  assign product75 = ((multiplier_mul_temp_74[27] == 1'b0) && (multiplier_mul_temp_74[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_74[27] == 1'b1) && (multiplier_mul_temp_74[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_74[13:0], 15'b000000000000000}));



  assign sum74_cast2 = {{5{product75[28]}}, product75};



  assign adder_add_cast_146 = {sum73[33], sum73};
  assign adder_add_cast_147 = {sum74_cast2[33], sum74_cast2};
  assign sum74_temp = adder_add_cast_146 + adder_add_cast_147;



  assign sum74 = ((sum74_temp[34] == 1'b0) && (sum74_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum74_temp[34] == 1'b1) && (sum74_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum74_temp[33:0])));



  assign coeff76 = 14'sb11111111101100;



  assign multiplier_mul_temp_75 = delay_pipeline_74 * coeff76;
  assign product76 = ((multiplier_mul_temp_75[27] == 1'b0) && (multiplier_mul_temp_75[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_75[27] == 1'b1) && (multiplier_mul_temp_75[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_75[13:0], 15'b000000000000000}));



  assign sum75_cast2 = {{5{product76[28]}}, product76};



  assign adder_add_cast_148 = {sum74[33], sum74};
  assign adder_add_cast_149 = {sum75_cast2[33], sum75_cast2};
  assign sum75_temp = adder_add_cast_148 + adder_add_cast_149;



  assign sum75 = ((sum75_temp[34] == 1'b0) && (sum75_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum75_temp[34] == 1'b1) && (sum75_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum75_temp[33:0])));



  assign coeff77 = 14'sb00000010000010;



  assign multiplier_mul_temp_76 = delay_pipeline_75 * coeff77;
  assign product77 = ((multiplier_mul_temp_76[27] == 1'b0) && (multiplier_mul_temp_76[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_76[27] == 1'b1) && (multiplier_mul_temp_76[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_76[13:0], 15'b000000000000000}));



  assign sum76_cast2 = {{5{product77[28]}}, product77};



  assign adder_add_cast_150 = {sum75[33], sum75};
  assign adder_add_cast_151 = {sum76_cast2[33], sum76_cast2};
  assign sum76_temp = adder_add_cast_150 + adder_add_cast_151;



  assign sum76 = ((sum76_temp[34] == 1'b0) && (sum76_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum76_temp[34] == 1'b1) && (sum76_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum76_temp[33:0])));



  assign coeff78 = 14'sb00000110011101;



  assign multiplier_mul_temp_77 = delay_pipeline_76 * coeff78;
  assign product78 = ((multiplier_mul_temp_77[27] == 1'b0) && (multiplier_mul_temp_77[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_77[27] == 1'b1) && (multiplier_mul_temp_77[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_77[13:0], 15'b000000000000000}));



  assign sum77_cast2 = {{5{product78[28]}}, product78};



  assign adder_add_cast_152 = {sum76[33], sum76};
  assign adder_add_cast_153 = {sum77_cast2[33], sum77_cast2};
  assign sum77_temp = adder_add_cast_152 + adder_add_cast_153;



  assign sum77 = ((sum77_temp[34] == 1'b0) && (sum77_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum77_temp[34] == 1'b1) && (sum77_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum77_temp[33:0])));



  assign coeff79 = 14'sb00001011001100;



  assign multiplier_mul_temp_78 = delay_pipeline_77 * coeff79;
  assign product79 = ((multiplier_mul_temp_78[27] == 1'b0) && (multiplier_mul_temp_78[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_78[27] == 1'b1) && (multiplier_mul_temp_78[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_78[13:0], 15'b000000000000000}));



  assign sum78_cast2 = {{5{product79[28]}}, product79};



  assign adder_add_cast_154 = {sum77[33], sum77};
  assign adder_add_cast_155 = {sum78_cast2[33], sum78_cast2};
  assign sum78_temp = adder_add_cast_154 + adder_add_cast_155;



  assign sum78 = ((sum78_temp[34] == 1'b0) && (sum78_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum78_temp[34] == 1'b1) && (sum78_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum78_temp[33:0])));



  assign coeff80 = 14'sb00001110100111;



  assign multiplier_mul_temp_79 = delay_pipeline_78 * coeff80;
  assign product80 = ((multiplier_mul_temp_79[27] == 1'b0) && (multiplier_mul_temp_79[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_79[27] == 1'b1) && (multiplier_mul_temp_79[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_79[13:0], 15'b000000000000000}));



  assign sum79_cast2 = {{5{product80[28]}}, product80};



  assign adder_add_cast_156 = {sum78[33], sum78};
  assign adder_add_cast_157 = {sum79_cast2[33], sum79_cast2};
  assign sum79_temp = adder_add_cast_156 + adder_add_cast_157;



  assign sum79 = ((sum79_temp[34] == 1'b0) && (sum79_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum79_temp[34] == 1'b1) && (sum79_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum79_temp[33:0])));



  assign coeff81 = 14'sb00001111011000;



  assign multiplier_mul_temp_80 = delay_pipeline_79 * coeff81;
  assign product81 = ((multiplier_mul_temp_80[27] == 1'b0) && (multiplier_mul_temp_80[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_80[27] == 1'b1) && (multiplier_mul_temp_80[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_80[13:0], 15'b000000000000000}));



  assign sum80_cast2 = {{5{product81[28]}}, product81};



  assign adder_add_cast_158 = {sum79[33], sum79};
  assign adder_add_cast_159 = {sum80_cast2[33], sum80_cast2};
  assign sum80_temp = adder_add_cast_158 + adder_add_cast_159;



  assign sum80 = ((sum80_temp[34] == 1'b0) && (sum80_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum80_temp[34] == 1'b1) && (sum80_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum80_temp[33:0])));



  assign coeff82 = 14'sb00001100111110;



  assign multiplier_mul_temp_81 = delay_pipeline_80 * coeff82;
  assign product82 = ((multiplier_mul_temp_81[27] == 1'b0) && (multiplier_mul_temp_81[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_81[27] == 1'b1) && (multiplier_mul_temp_81[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_81[13:0], 15'b000000000000000}));



  assign sum81_cast2 = {{5{product82[28]}}, product82};



  assign adder_add_cast_160 = {sum80[33], sum80};
  assign adder_add_cast_161 = {sum81_cast2[33], sum81_cast2};
  assign sum81_temp = adder_add_cast_160 + adder_add_cast_161;



  assign sum81 = ((sum81_temp[34] == 1'b0) && (sum81_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum81_temp[34] == 1'b1) && (sum81_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum81_temp[33:0])));



  assign coeff83 = 14'sb00000111110010;



  assign multiplier_mul_temp_82 = delay_pipeline_81 * coeff83;
  assign product83 = ((multiplier_mul_temp_82[27] == 1'b0) && (multiplier_mul_temp_82[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_82[27] == 1'b1) && (multiplier_mul_temp_82[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_82[13:0], 15'b000000000000000}));



  assign sum82_cast2 = {{5{product83[28]}}, product83};



  assign adder_add_cast_162 = {sum81[33], sum81};
  assign adder_add_cast_163 = {sum82_cast2[33], sum82_cast2};
  assign sum82_temp = adder_add_cast_162 + adder_add_cast_163;



  assign sum82 = ((sum82_temp[34] == 1'b0) && (sum82_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum82_temp[34] == 1'b1) && (sum82_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum82_temp[33:0])));



  assign coeff84 = 14'sb00000000110101;



  assign multiplier_mul_temp_83 = delay_pipeline_82 * coeff84;
  assign product84 = ((multiplier_mul_temp_83[27] == 1'b0) && (multiplier_mul_temp_83[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_83[27] == 1'b1) && (multiplier_mul_temp_83[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_83[13:0], 15'b000000000000000}));



  assign sum83_cast2 = {{5{product84[28]}}, product84};



  assign adder_add_cast_164 = {sum82[33], sum82};
  assign adder_add_cast_165 = {sum83_cast2[33], sum83_cast2};
  assign sum83_temp = adder_add_cast_164 + adder_add_cast_165;



  assign sum83 = ((sum83_temp[34] == 1'b0) && (sum83_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum83_temp[34] == 1'b1) && (sum83_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum83_temp[33:0])));



  assign coeff85 = 14'sb11111001100010;



  assign multiplier_mul_temp_84 = delay_pipeline_83 * coeff85;
  assign product85 = ((multiplier_mul_temp_84[27] == 1'b0) && (multiplier_mul_temp_84[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_84[27] == 1'b1) && (multiplier_mul_temp_84[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_84[13:0], 15'b000000000000000}));



  assign sum84_cast2 = {{5{product85[28]}}, product85};



  assign adder_add_cast_166 = {sum83[33], sum83};
  assign adder_add_cast_167 = {sum84_cast2[33], sum84_cast2};
  assign sum84_temp = adder_add_cast_166 + adder_add_cast_167;



  assign sum84 = ((sum84_temp[34] == 1'b0) && (sum84_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum84_temp[34] == 1'b1) && (sum84_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum84_temp[33:0])));



  assign coeff86 = 14'sb11110011011101;



  assign multiplier_mul_temp_85 = delay_pipeline_84 * coeff86;
  assign product86 = ((multiplier_mul_temp_85[27] == 1'b0) && (multiplier_mul_temp_85[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_85[27] == 1'b1) && (multiplier_mul_temp_85[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_85[13:0], 15'b000000000000000}));



  assign sum85_cast2 = {{5{product86[28]}}, product86};



  assign adder_add_cast_168 = {sum84[33], sum84};
  assign adder_add_cast_169 = {sum85_cast2[33], sum85_cast2};
  assign sum85_temp = adder_add_cast_168 + adder_add_cast_169;



  assign sum85 = ((sum85_temp[34] == 1'b0) && (sum85_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum85_temp[34] == 1'b1) && (sum85_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum85_temp[33:0])));



  assign coeff87 = 14'sb11101111101101;



  assign multiplier_mul_temp_86 = delay_pipeline_85 * coeff87;
  assign product87 = ((multiplier_mul_temp_86[27] == 1'b0) && (multiplier_mul_temp_86[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_86[27] == 1'b1) && (multiplier_mul_temp_86[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_86[13:0], 15'b000000000000000}));



  assign sum86_cast2 = {{5{product87[28]}}, product87};



  assign adder_add_cast_170 = {sum85[33], sum85};
  assign adder_add_cast_171 = {sum86_cast2[33], sum86_cast2};
  assign sum86_temp = adder_add_cast_170 + adder_add_cast_171;



  assign sum86 = ((sum86_temp[34] == 1'b0) && (sum86_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum86_temp[34] == 1'b1) && (sum86_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum86_temp[33:0])));



  assign coeff88 = 14'sb11101110110110;



  assign multiplier_mul_temp_87 = delay_pipeline_86 * coeff88;
  assign product88 = ((multiplier_mul_temp_87[27] == 1'b0) && (multiplier_mul_temp_87[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_87[27] == 1'b1) && (multiplier_mul_temp_87[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_87[13:0], 15'b000000000000000}));



  assign sum87_cast2 = {{5{product88[28]}}, product88};



  assign adder_add_cast_172 = {sum86[33], sum86};
  assign adder_add_cast_173 = {sum87_cast2[33], sum87_cast2};
  assign sum87_temp = adder_add_cast_172 + adder_add_cast_173;



  assign sum87 = ((sum87_temp[34] == 1'b0) && (sum87_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum87_temp[34] == 1'b1) && (sum87_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum87_temp[33:0])));



  assign coeff89 = 14'sb11110000101101;



  assign multiplier_mul_temp_88 = delay_pipeline_87 * coeff89;
  assign product89 = ((multiplier_mul_temp_88[27] == 1'b0) && (multiplier_mul_temp_88[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_88[27] == 1'b1) && (multiplier_mul_temp_88[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_88[13:0], 15'b000000000000000}));



  assign sum88_cast2 = {{5{product89[28]}}, product89};



  assign adder_add_cast_174 = {sum87[33], sum87};
  assign adder_add_cast_175 = {sum88_cast2[33], sum88_cast2};
  assign sum88_temp = adder_add_cast_174 + adder_add_cast_175;



  assign sum88 = ((sum88_temp[34] == 1'b0) && (sum88_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum88_temp[34] == 1'b1) && (sum88_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum88_temp[33:0])));



  assign coeff90 = 14'sb11110100100101;



  assign multiplier_mul_temp_89 = delay_pipeline_88 * coeff90;
  assign product90 = ((multiplier_mul_temp_89[27] == 1'b0) && (multiplier_mul_temp_89[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_89[27] == 1'b1) && (multiplier_mul_temp_89[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_89[13:0], 15'b000000000000000}));



  assign sum89_cast2 = {{5{product90[28]}}, product90};



  assign adder_add_cast_176 = {sum88[33], sum88};
  assign adder_add_cast_177 = {sum89_cast2[33], sum89_cast2};
  assign sum89_temp = adder_add_cast_176 + adder_add_cast_177;



  assign sum89 = ((sum89_temp[34] == 1'b0) && (sum89_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum89_temp[34] == 1'b1) && (sum89_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum89_temp[33:0])));



  assign coeff91 = 14'sb11111001010101;



  assign multiplier_mul_temp_90 = delay_pipeline_89 * coeff91;
  assign product91 = ((multiplier_mul_temp_90[27] == 1'b0) && (multiplier_mul_temp_90[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_90[27] == 1'b1) && (multiplier_mul_temp_90[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_90[13:0], 15'b000000000000000}));



  assign sum90_cast2 = {{5{product91[28]}}, product91};



  assign adder_add_cast_178 = {sum89[33], sum89};
  assign adder_add_cast_179 = {sum90_cast2[33], sum90_cast2};
  assign sum90_temp = adder_add_cast_178 + adder_add_cast_179;



  assign sum90 = ((sum90_temp[34] == 1'b0) && (sum90_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum90_temp[34] == 1'b1) && (sum90_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum90_temp[33:0])));



  assign coeff92 = 14'sb11111101110000;



  assign multiplier_mul_temp_91 = delay_pipeline_90 * coeff92;
  assign product92 = ((multiplier_mul_temp_91[27] == 1'b0) && (multiplier_mul_temp_91[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_91[27] == 1'b1) && (multiplier_mul_temp_91[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_91[13:0], 15'b000000000000000}));



  assign sum91_cast2 = {{5{product92[28]}}, product92};



  assign adder_add_cast_180 = {sum90[33], sum90};
  assign adder_add_cast_181 = {sum91_cast2[33], sum91_cast2};
  assign sum91_temp = adder_add_cast_180 + adder_add_cast_181;



  assign sum91 = ((sum91_temp[34] == 1'b0) && (sum91_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum91_temp[34] == 1'b1) && (sum91_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum91_temp[33:0])));



  assign coeff93 = 14'sb00000000111110;



  assign multiplier_mul_temp_92 = delay_pipeline_91 * coeff93;
  assign product93 = ((multiplier_mul_temp_92[27] == 1'b0) && (multiplier_mul_temp_92[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_92[27] == 1'b1) && (multiplier_mul_temp_92[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_92[13:0], 15'b000000000000000}));



  assign sum92_cast2 = {{5{product93[28]}}, product93};



  assign adder_add_cast_182 = {sum91[33], sum91};
  assign adder_add_cast_183 = {sum92_cast2[33], sum92_cast2};
  assign sum92_temp = adder_add_cast_182 + adder_add_cast_183;



  assign sum92 = ((sum92_temp[34] == 1'b0) && (sum92_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum92_temp[34] == 1'b1) && (sum92_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum92_temp[33:0])));



  assign coeff94 = 14'sb00000010100001;



  assign multiplier_mul_temp_93 = delay_pipeline_92 * coeff94;
  assign product94 = ((multiplier_mul_temp_93[27] == 1'b0) && (multiplier_mul_temp_93[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_93[27] == 1'b1) && (multiplier_mul_temp_93[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_93[13:0], 15'b000000000000000}));



  assign sum93_cast2 = {{5{product94[28]}}, product94};



  assign adder_add_cast_184 = {sum92[33], sum92};
  assign adder_add_cast_185 = {sum93_cast2[33], sum93_cast2};
  assign sum93_temp = adder_add_cast_184 + adder_add_cast_185;



  assign sum93 = ((sum93_temp[34] == 1'b0) && (sum93_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum93_temp[34] == 1'b1) && (sum93_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum93_temp[33:0])));



  assign coeff95 = 14'sb00000010010111;



  assign multiplier_mul_temp_94 = delay_pipeline_93 * coeff95;
  assign product95 = ((multiplier_mul_temp_94[27] == 1'b0) && (multiplier_mul_temp_94[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_94[27] == 1'b1) && (multiplier_mul_temp_94[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_94[13:0], 15'b000000000000000}));



  assign sum94_cast2 = {{5{product95[28]}}, product95};



  assign adder_add_cast_186 = {sum93[33], sum93};
  assign adder_add_cast_187 = {sum94_cast2[33], sum94_cast2};
  assign sum94_temp = adder_add_cast_186 + adder_add_cast_187;



  assign sum94 = ((sum94_temp[34] == 1'b0) && (sum94_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum94_temp[34] == 1'b1) && (sum94_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum94_temp[33:0])));



  assign coeff96 = 14'sb00000001000001;



  assign multiplier_mul_temp_95 = delay_pipeline_94 * coeff96;
  assign product96 = ((multiplier_mul_temp_95[27] == 1'b0) && (multiplier_mul_temp_95[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_95[27] == 1'b1) && (multiplier_mul_temp_95[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_95[13:0], 15'b000000000000000}));



  assign sum95_cast2 = {{5{product96[28]}}, product96};



  assign adder_add_cast_188 = {sum94[33], sum94};
  assign adder_add_cast_189 = {sum95_cast2[33], sum95_cast2};
  assign sum95_temp = adder_add_cast_188 + adder_add_cast_189;



  assign sum95 = ((sum95_temp[34] == 1'b0) && (sum95_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum95_temp[34] == 1'b1) && (sum95_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum95_temp[33:0])));



  assign coeff97 = 14'sb11111111001111;



  assign multiplier_mul_temp_96 = delay_pipeline_95 * coeff97;
  assign product97 = ((multiplier_mul_temp_96[27] == 1'b0) && (multiplier_mul_temp_96[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_96[27] == 1'b1) && (multiplier_mul_temp_96[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_96[13:0], 15'b000000000000000}));



  assign sum96_cast2 = {{5{product97[28]}}, product97};



  assign adder_add_cast_190 = {sum95[33], sum95};
  assign adder_add_cast_191 = {sum96_cast2[33], sum96_cast2};
  assign sum96_temp = adder_add_cast_190 + adder_add_cast_191;



  assign sum96 = ((sum96_temp[34] == 1'b0) && (sum96_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum96_temp[34] == 1'b1) && (sum96_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum96_temp[33:0])));



  assign coeff98 = 14'sb11111101110010;



  assign multiplier_mul_temp_97 = delay_pipeline_96 * coeff98;
  assign product98 = ((multiplier_mul_temp_97[27] == 1'b0) && (multiplier_mul_temp_97[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_97[27] == 1'b1) && (multiplier_mul_temp_97[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_97[13:0], 15'b000000000000000}));



  assign sum97_cast2 = {{5{product98[28]}}, product98};



  assign adder_add_cast_192 = {sum96[33], sum96};
  assign adder_add_cast_193 = {sum97_cast2[33], sum97_cast2};
  assign sum97_temp = adder_add_cast_192 + adder_add_cast_193;



  assign sum97 = ((sum97_temp[34] == 1'b0) && (sum97_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum97_temp[34] == 1'b1) && (sum97_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum97_temp[33:0])));



  assign coeff99 = 14'sb11111101001111;



  assign multiplier_mul_temp_98 = delay_pipeline_97 * coeff99;
  assign product99 = ((multiplier_mul_temp_98[27] == 1'b0) && (multiplier_mul_temp_98[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_98[27] == 1'b1) && (multiplier_mul_temp_98[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_98[13:0], 15'b000000000000000}));



  assign sum98_cast2 = {{5{product99[28]}}, product99};



  assign adder_add_cast_194 = {sum97[33], sum97};
  assign adder_add_cast_195 = {sum98_cast2[33], sum98_cast2};
  assign sum98_temp = adder_add_cast_194 + adder_add_cast_195;



  assign sum98 = ((sum98_temp[34] == 1'b0) && (sum98_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum98_temp[34] == 1'b1) && (sum98_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum98_temp[33:0])));



  assign coeff100 = 14'sb11111101110111;



  assign multiplier_mul_temp_99 = delay_pipeline_98 * coeff100;
  assign product100 = ((multiplier_mul_temp_99[27] == 1'b0) && (multiplier_mul_temp_99[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_99[27] == 1'b1) && (multiplier_mul_temp_99[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_99[13:0], 15'b000000000000000}));



  assign sum99_cast2 = {{5{product100[28]}}, product100};



  assign adder_add_cast_196 = {sum98[33], sum98};
  assign adder_add_cast_197 = {sum99_cast2[33], sum99_cast2};
  assign sum99_temp = adder_add_cast_196 + adder_add_cast_197;



  assign sum99 = ((sum99_temp[34] == 1'b0) && (sum99_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum99_temp[34] == 1'b1) && (sum99_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum99_temp[33:0])));



  assign coeff101 = 14'sb11111111101001;



  assign multiplier_mul_temp_100 = delay_pipeline_99 * coeff101;
  assign product101 = ((multiplier_mul_temp_100[27] == 1'b0) && (multiplier_mul_temp_100[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_100[27] == 1'b1) && (multiplier_mul_temp_100[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_100[13:0], 15'b000000000000000}));



  assign sum100_cast2 = {{5{product101[28]}}, product101};



  assign adder_add_cast_198 = {sum99[33], sum99};
  assign adder_add_cast_199 = {sum100_cast2[33], sum100_cast2};
  assign sum100_temp = adder_add_cast_198 + adder_add_cast_199;



  assign sum100 = ((sum100_temp[34] == 1'b0) && (sum100_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum100_temp[34] == 1'b1) && (sum100_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum100_temp[33:0])));



  assign coeff102 = 14'sb00000010100001;



  assign multiplier_mul_temp_101 = delay_pipeline_100 * coeff102;
  assign product102 = ((multiplier_mul_temp_101[27] == 1'b0) && (multiplier_mul_temp_101[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_101[27] == 1'b1) && (multiplier_mul_temp_101[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_101[13:0], 15'b000000000000000}));



  assign sum101_cast2 = {{5{product102[28]}}, product102};



  assign adder_add_cast_200 = {sum100[33], sum100};
  assign adder_add_cast_201 = {sum101_cast2[33], sum101_cast2};
  assign sum101_temp = adder_add_cast_200 + adder_add_cast_201;



  assign sum101 = ((sum101_temp[34] == 1'b0) && (sum101_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum101_temp[34] == 1'b1) && (sum101_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum101_temp[33:0])));



  assign coeff103 = 14'sb00000110101001;



  assign multiplier_mul_temp_102 = delay_pipeline_101 * coeff103;
  assign product103 = ((multiplier_mul_temp_102[27] == 1'b0) && (multiplier_mul_temp_102[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_102[27] == 1'b1) && (multiplier_mul_temp_102[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_102[13:0], 15'b000000000000000}));



  assign sum102_cast2 = {{5{product103[28]}}, product103};



  assign adder_add_cast_202 = {sum101[33], sum101};
  assign adder_add_cast_203 = {sum102_cast2[33], sum102_cast2};
  assign sum102_temp = adder_add_cast_202 + adder_add_cast_203;



  assign sum102 = ((sum102_temp[34] == 1'b0) && (sum102_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum102_temp[34] == 1'b1) && (sum102_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum102_temp[33:0])));



  assign coeff104 = 14'sb00001100101011;



  assign multiplier_mul_temp_103 = delay_pipeline_102 * coeff104;
  assign product104 = ((multiplier_mul_temp_103[27] == 1'b0) && (multiplier_mul_temp_103[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_103[27] == 1'b1) && (multiplier_mul_temp_103[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_103[13:0], 15'b000000000000000}));



  assign sum103_cast2 = {{5{product104[28]}}, product104};



  assign adder_add_cast_204 = {sum102[33], sum102};
  assign adder_add_cast_205 = {sum103_cast2[33], sum103_cast2};
  assign sum103_temp = adder_add_cast_204 + adder_add_cast_205;



  assign sum103 = ((sum103_temp[34] == 1'b0) && (sum103_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum103_temp[34] == 1'b1) && (sum103_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum103_temp[33:0])));



  assign coeff105 = 14'sb00010100110111;



  assign multiplier_mul_temp_104 = delay_pipeline_103 * coeff105;
  assign product105 = ((multiplier_mul_temp_104[27] == 1'b0) && (multiplier_mul_temp_104[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_104[27] == 1'b1) && (multiplier_mul_temp_104[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_104[13:0], 15'b000000000000000}));



  assign sum104_cast2 = {{5{product105[28]}}, product105};



  assign adder_add_cast_206 = {sum103[33], sum103};
  assign adder_add_cast_207 = {sum104_cast2[33], sum104_cast2};
  assign sum104_temp = adder_add_cast_206 + adder_add_cast_207;



  assign sum104 = ((sum104_temp[34] == 1'b0) && (sum104_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum104_temp[34] == 1'b1) && (sum104_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum104_temp[33:0])));



  assign coeff106 = 14'sb00011100010010;



  assign multiplier_mul_temp_105 = delay_pipeline_104 * coeff106;
  assign product106 = ((multiplier_mul_temp_105[27] == 1'b0) && (multiplier_mul_temp_105[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_105[27] == 1'b1) && (multiplier_mul_temp_105[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_105[13:0], 15'b000000000000000}));



  assign sum105_cast2 = {{5{product106[28]}}, product106};



  assign adder_add_cast_208 = {sum104[33], sum104};
  assign adder_add_cast_209 = {sum105_cast2[33], sum105_cast2};
  assign sum105_temp = adder_add_cast_208 + adder_add_cast_209;



  assign sum105 = ((sum105_temp[34] == 1'b0) && (sum105_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum105_temp[34] == 1'b1) && (sum105_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum105_temp[33:0])));



  assign coeff107 = 14'sb00010101101110;



  assign multiplier_mul_temp_106 = delay_pipeline_105 * coeff107;
  assign product107 = ((multiplier_mul_temp_106[27] == 1'b0) && (multiplier_mul_temp_106[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_106[27] == 1'b1) && (multiplier_mul_temp_106[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_106[13:0], 15'b000000000000000}));



  assign sum106_cast2 = {{5{product107[28]}}, product107};



  assign adder_add_cast_210 = {sum105[33], sum105};
  assign adder_add_cast_211 = {sum106_cast2[33], sum106_cast2};
  assign sum106_temp = adder_add_cast_210 + adder_add_cast_211;



  assign sum106 = ((sum106_temp[34] == 1'b0) && (sum106_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum106_temp[34] == 1'b1) && (sum106_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum106_temp[33:0])));



  assign coeff108 = 14'sb11011101110000;



  assign multiplier_mul_temp_107 = delay_pipeline_106 * coeff108;
  assign product108 = ((multiplier_mul_temp_107[27] == 1'b0) && (multiplier_mul_temp_107[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_107[27] == 1'b1) && (multiplier_mul_temp_107[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_107[13:0], 15'b000000000000000}));



  assign sum107_cast2 = {{5{product108[28]}}, product108};



  assign adder_add_cast_212 = {sum106[33], sum106};
  assign adder_add_cast_213 = {sum107_cast2[33], sum107_cast2};
  assign sum107_temp = adder_add_cast_212 + adder_add_cast_213;



  assign sum107 = ((sum107_temp[34] == 1'b0) && (sum107_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum107_temp[34] == 1'b1) && (sum107_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum107_temp[33:0])));



  assign coeff109 = 14'sb00001100101111;



  assign multiplier_mul_temp_108 = delay_pipeline_107 * coeff109;
  assign product109 = ((multiplier_mul_temp_108[27] == 1'b0) && (multiplier_mul_temp_108[26:13] != 14'b00000000000000) ? 29'sb01111111111111111111111111111 :
              ((multiplier_mul_temp_108[27] == 1'b1) && (multiplier_mul_temp_108[26:13] != 14'b11111111111111) ? 29'sb10000000000000000000000000000 :
              {multiplier_mul_temp_108[13:0], 15'b000000000000000}));



  assign sum108_cast2 = {{5{product109[28]}}, product109};



  assign adder_add_cast_214 = {sum107[33], sum107};
  assign adder_add_cast_215 = {sum108_cast2[33], sum108_cast2};
  assign sum108_temp = adder_add_cast_214 + adder_add_cast_215;



  assign sum108 = ((sum108_temp[34] == 1'b0) && (sum108_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((sum108_temp[34] == 1'b1) && (sum108_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(sum108_temp[33:0])));



  assign output_typeconvert = ({{11{sum108[33]}}, sum108[33:31]}) + $signed({1'b0, sum108[30] & (sum108[31] | (|sum108[29:0]))});



  assign filter_out = output_typeconvert;

endmodule  // filter

